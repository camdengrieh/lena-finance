{
  "address": "0x848B2e4C7D0aA1391D145b3629a517EBE0EC70b9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_autoCollectAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_lpFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_collectFeeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nameHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "flatFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "flatFeeToken",
          "type": "address"
        }
      ],
      "name": "onAddFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "onDecreaseLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nameHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "flatFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "flatFeeToken",
          "type": "address"
        }
      ],
      "name": "onEditFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "onIncreaseLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lock_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftPositionManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nft_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "additionalCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "feeGrowthInside0LastX128",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeGrowthInside1LastX128",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "tokensOwed0",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "tokensOwed1",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct INonfungiblePositionManager.Position",
          "name": "position",
          "type": "tuple"
        }
      ],
      "name": "onLock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "onLockOwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        }
      ],
      "name": "onRelock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nameHash",
          "type": "bytes32"
        }
      ],
      "name": "onRemoveFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "additionalCollector",
          "type": "address"
        }
      ],
      "name": "onSetAdditionalCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectAddress",
          "type": "address"
        }
      ],
      "name": "onSetCollectAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        }
      ],
      "name": "onSetMigrator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ucf",
          "type": "uint256"
        }
      ],
      "name": "onSetUCF",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "onTransferLockOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lock_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "onWithdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTO_COLLECT_ACCOUNT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETERNAL_LOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_ADDR_COLLECT",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_ADDR_LP",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_RESOLVER",
      "outputs": [
        {
          "internalType": "contract IFeeResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LOCKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lock_id",
          "type": "uint256"
        },
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "nftPositionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nft_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "additionalCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collectAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ucf",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NONCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        }
      ],
      "name": "acceptLockOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_lpFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collectFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_flatFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_flatFeeToken",
          "type": "address"
        }
      ],
      "name": "addOrEditFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "adminRefundERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "adminRefundEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "batchUpdateWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_amount0Max",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_amount1Max",
          "type": "uint128"
        }
      ],
      "name": "collect",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "amount0Min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1Min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "decreaseLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "currentTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickHigher",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        }
      ],
      "name": "getAmountsForLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flatFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "flatFeeToken",
              "type": "address"
            }
          ],
          "internalType": "struct ILenaLock.FeeStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getFeeOptionAtIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flatFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "flatFeeToken",
              "type": "address"
            }
          ],
          "internalType": "struct ILenaLock.FeeStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeOptionLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        }
      ],
      "name": "getLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lock_id",
              "type": "uint256"
            },
            {
              "internalType": "contract INonfungiblePositionManager",
              "name": "nftPositionManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nft_id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pendingOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "additionalCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collectAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "unlockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ucf",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILenaLock.Lock",
          "name": "_lock",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLocksLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getNumUserLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getUserLockAtIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lock_id",
              "type": "uint256"
            },
            {
              "internalType": "contract INonfungiblePositionManager",
              "name": "nftPositionManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nft_id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pendingOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "additionalCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collectAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "unlockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ucf",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILenaLock.Lock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount0Desired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1Desired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount0Min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1Min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "increaseLiquidity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract INonfungiblePositionManager",
              "name": "nftPositionManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nft_id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dustRecipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "additionalCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collectAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "unlockDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "feeName",
              "type": "string"
            },
            {
              "internalType": "bytes[]",
              "name": "r",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct ILenaLock.LockParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract INonfungiblePositionManager",
              "name": "nftPositionManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nft_id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dustRecipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "additionalCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collectAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "unlockDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "feeName",
              "type": "string"
            },
            {
              "internalType": "bytes[]",
              "name": "r",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct ILenaLock.LockParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "lockAndConvert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockDate",
          "type": "uint256"
        }
      ],
      "name": "relock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "removeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_additionalCollector",
          "type": "address"
        }
      ],
      "name": "setAdditionalCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collectAddress",
          "type": "address"
        }
      ],
      "name": "setCollectAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_autoCollectAccount",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_lpFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_collectFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeeResolver",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "setFeeResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ucf",
          "type": "uint256"
        }
      ],
      "name": "setUCF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        }
      ],
      "name": "tickSpacingToMaxTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "maxTick",
          "type": "int24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferLockOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "updateWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4810d174e2e14bb95a7211e58adebde0a4debf9f82a70e223f77cfce41da08c",
  "receipt": {
    "to": null,
    "from": "0x2c0fb49C3b47E2C854B92aC5A8Aac59cbC8272b6",
    "contractAddress": "0x848B2e4C7D0aA1391D145b3629a517EBE0EC70b9",
    "transactionIndex": 2,
    "gasUsed": "5857035",
    "logsBloom": "0x
    "blockHash": "0x4923393c235fad8d906be06576617dc932d472f4761c4e37c54d11e55babc562",
    "transactionHash": "0xa4810d174e2e14bb95a7211e58adebde0a4debf9f82a70e223f77cfce41da08c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 5179414,
        "transactionHash": "0xa4810d174e2e14bb95a7211e58adebde0a4debf9f82a70e223f77cfce41da08c",
        "address": "0x848B2e4C7D0aA1391D145b3629a517EBE0EC70b9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002c0fb49c3b47e2c854b92ac5a8aac59cbc8272b6"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x4923393c235fad8d906be06576617dc932d472f4761c4e37c54d11e55babc562"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 5179414,
        "transactionHash": "0xa4810d174e2e14bb95a7211e58adebde0a4debf9f82a70e223f77cfce41da08c",
        "address": "0x848B2e4C7D0aA1391D145b3629a517EBE0EC70b9",
        "topics": [
          "0x335d96fad821252e8298f51336937e44332b3731a3c3f249b2cdb77652b33e4f"
        ],
        "data": "0x9f28225c7d0ace67fa2516bd7725f3949e9a591de0eae9db822b2cb79f38a6b000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000744454641554c5400000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0x4923393c235fad8d906be06576617dc932d472f4761c4e37c54d11e55babc562"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 5179414,
        "transactionHash": "0xa4810d174e2e14bb95a7211e58adebde0a4debf9f82a70e223f77cfce41da08c",
        "address": "0x848B2e4C7D0aA1391D145b3629a517EBE0EC70b9",
        "topics": [
          "0x335d96fad821252e8298f51336937e44332b3731a3c3f249b2cdb77652b33e4f"
        ],
        "data": "0xd738a3fa971b7adb8e28fe117e535dccf9629332e09e1292fa161ecec33f2bea00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c56500000000000000000000000000000000000000000000000000000000000",
        "logIndex": 6,
        "blockHash": "0x4923393c235fad8d906be06576617dc932d472f4761c4e37c54d11e55babc562"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 5179414,
        "transactionHash": "0xa4810d174e2e14bb95a7211e58adebde0a4debf9f82a70e223f77cfce41da08c",
        "address": "0x848B2e4C7D0aA1391D145b3629a517EBE0EC70b9",
        "topics": [
          "0x335d96fad821252e8298f51336937e44332b3731a3c3f249b2cdb77652b33e4f"
        ],
        "data": "0x2fc3ced8a98d5e9984f3075c656b09175a5a3610addbab2e50fafde0ef02c42e00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000015e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c4c500000000000000000000000000000000000000000000000000000000000",
        "logIndex": 7,
        "blockHash": "0x4923393c235fad8d906be06576617dc932d472f4761c4e37c54d11e55babc562"
      }
    ],
    "blockNumber": 5179414,
    "cumulativeGasUsed": "6537459",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf5E6B7206e7DEbc4e2558fA7667ECa2C84aBF7Fa",
    "0xFb8180fDdf4F8df3967B821db8dc92D080DB0912",
    "0xE6A6F5eA01e6F7AFF1E800c8Abf64Ab6aB59b996"
  ],
  "numDeployments": 1,
  "solcInputHash": "6a59ed3682a83f68b8ed23fbbbb2285e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_autoCollectAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_lpFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_collectFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flatFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flatFeeToken\",\"type\":\"address\"}],\"name\":\"onAddFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"onDecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flatFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flatFeeToken\",\"type\":\"address\"}],\"name\":\"onEditFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"onIncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lock_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftPositionManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"additionalCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct INonfungiblePositionManager.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"onLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"onLockOwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"onRelock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"}],\"name\":\"onRemoveFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"additionalCollector\",\"type\":\"address\"}],\"name\":\"onSetAdditionalCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectAddress\",\"type\":\"address\"}],\"name\":\"onSetCollectAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"onSetMigrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ucf\",\"type\":\"uint256\"}],\"name\":\"onSetUCF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onTransferLockOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lock_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTO_COLLECT_ACCOUNT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETERNAL_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ADDR_COLLECT\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ADDR_LP\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RESOLVER\",\"outputs\":[{\"internalType\":\"contract IFeeResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lock_id\",\"type\":\"uint256\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"nftPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"additionalCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ucf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NONCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"acceptLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flatFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_flatFeeToken\",\"type\":\"address\"}],\"name\":\"addOrEditFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminRefundERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"adminRefundEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"batchUpdateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_amount1Max\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"currentTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickHigher\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"getAmountsForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getFee\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flatFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flatFeeToken\",\"type\":\"address\"}],\"internalType\":\"struct ILenaLock.FeeStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFeeOptionAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flatFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flatFeeToken\",\"type\":\"address\"}],\"internalType\":\"struct ILenaLock.FeeStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeOptionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"getLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lock_id\",\"type\":\"uint256\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"nftPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"additionalCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ucf\",\"type\":\"uint256\"}],\"internalType\":\"struct ILenaLock.Lock\",\"name\":\"_lock\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLocksLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNumUserLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lock_id\",\"type\":\"uint256\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"nftPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"additionalCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ucf\",\"type\":\"uint256\"}],\"internalType\":\"struct ILenaLock.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"nftPositionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dustRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"additionalCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"feeName\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"r\",\"type\":\"bytes[]\"}],\"internalType\":\"struct ILenaLock.LockParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"nftPositionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dustRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"additionalCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"feeName\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"r\",\"type\":\"bytes[]\"}],\"internalType\":\"struct ILenaLock.LockParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"lockAndConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"removeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_additionalCollector\",\"type\":\"address\"}],\"name\":\"setAdditionalCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collectAddress\",\"type\":\"address\"}],\"name\":\"setCollectAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoCollectAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_lpFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_collectFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setFeeResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ucf\",\"type\":\"uint256\"}],\"name\":\"setUCF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"tickSpacingToMaxTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"maxTick\",\"type\":\"int24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptLockOwnership(uint256)\":{\"details\":\"accept lock ownership transfer\"},\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"adminRefundERC20(address,address,uint256)\":{\"details\":\"Allows admin to remove any ERC20's mistakenly sent to the contract Since this contract is only for locking NFT liquidity, this allows removal of ERC20 tokens and cannot remove locked NFT liquidity.\"},\"adminRefundEth(uint256,address)\":{\"details\":\"Allows admin to remove any eth mistakenly sent to the contract\"},\"batchUpdateWhitelist(address[],bool)\":{\"details\":\"Function to add multiple addresses to whitelist at once (only owner)\"},\"collect(uint256,address,uint128,uint128)\":{\"details\":\"Collect fees to _recipient if msg.sender is the owner of _lockId\"},\"decreaseLiquidity(uint256,(uint256,uint128,uint256,uint256,uint256))\":{\"details\":\"decrease liquidity if a lock has expired (useful before relocking)\"},\"getAmountsForLiquidity(int24,int24,int24,uint128)\":{\"details\":\"get a locks liquidity in amounts of token0 and token1 for a generic position (not from state)\"},\"getLock(uint256)\":{\"details\":\"returns a Lock struct for _lockId\"},\"getLocksLength()\":{\"details\":\"gets the number of unique locks in this contract, used to page through the lock array (includes expired and withdrawn locks)\"},\"getNumUserLocks(address)\":{\"details\":\"gets the number of locks for a user\"},\"getUserLockAtIndex(address,uint256)\":{\"details\":\"gets the lock at a specific index for a user\"},\"increaseLiquidity(uint256,(uint256,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"increases liquidity. Can be called by anyone. You should ideally call increaseLiquidity from the NftPositionManager directly for gas efficiency. This method is here just for convenience for some contracts which solely interact with the Lena lockers / lockIds\"},\"isWhitelisted(address)\":{\"details\":\"Function to check if an address is whitelisted\"},\"lock((address,uint256,address,address,address,address,uint256,string,bytes[]))\":{\"details\":\"collects fees and sends them back to collector\",\"params\":{\"params\":\"The locking params as seen in ILenaLock.sol This will also fail with rebasing tokens (liquidity nfts already stuck on univ3). Only whitelisted platforms can use this lock mechanism, such as projects with launchpads\"}},\"lockAndConvert((address,uint256,address,address,address,address,uint256,string,bytes[]))\":{\"details\":\"converts nft to full range and collects fees and sends them back to collector\",\"params\":{\"params\":\"The locking params as seen in ILenaLock.sol This function will fail if a liquidity position is out of range (100% token0, 0% token1) as it will not be able to create a full range position with counter liquidity. This will also fail with rebasing tokens (liquidity nfts already stuck on univ3).\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"relock(uint256,uint256)\":{\"details\":\"set the unlock date further in the future\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAdditionalCollector(uint256,address)\":{\"details\":\"allow a lock owner to add an additional address, usually a contract, to collect fees. Useful for bots\"},\"setCollectAddress(uint256,address)\":{\"details\":\"set the adress to which fees are automatically collected\"},\"setUCF(uint256,uint256)\":{\"details\":\"set ucf\"},\"tickSpacingToMaxTick(int24)\":{\"details\":\"gets the maximum tick for a tickSpacing source: https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/Tick.sol\"},\"transferLockOwnership(uint256,address)\":{\"details\":\"transfer ownership of a lock to _newOwner\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateWhitelist(address,bool)\":{\"details\":\"Function to add or remove addresses from whitelist (only owner)\"},\"withdraw(uint256,address)\":{\"details\":\"withdraw a UniV3 liquidity NFT and send it to _receiver Only callable once unlockDate has expired\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/locker/LenaLock.sol\":\"LenaLock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/dex/UniV3/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport './IPoolInitializer.sol';\\n\\n// Importing from @uniswap doesnt work with @openzepplins latest release so this is refactored\\n// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol\\n\\ninterface INonfungiblePositionManager is IPoolInitializer {\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function WETH9() external view returns (address);\\n    \\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    function mint(\\n        MintParams calldata params\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct Position {\\n        uint96 nonce;\\n        address operator;\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint128 liquidity;\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n        uint128 tokensOwed0;\\n        uint128 tokensOwed1;\\n    }\\n\\n    function positions(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    function collect(\\n        CollectParams calldata params\\n    ) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    function factory() external view returns (address);\\n\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x5ca0b16597c58e75768c1be663defa286be79a7a802484b061769b3004d4567e\",\"license\":\"UNLICENSED\"},\"contracts/dex/UniV3/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.28;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\",\"keccak256\":\"0xfac3cef3a43d7790d5421a83db8f5db3a6072abaf04bf6b4bdee74a926ad4e0d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/dex/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.28;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(\\n            success,\\n            \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5f78d093d748a2ae8fb763e0be71316063f02043d8e3cff2cc4d17f89c954049\",\"license\":\"GPL-3.0-or-later\"},\"contracts/locker/ILenaLock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.28;\\n\\nimport \\\"../dex/UniV3/INonfungiblePositionManager.sol\\\";\\n\\n/**\\n * @dev Interface of the LENA UniswapV3 Liquidity Locker\\n */\\ninterface ILenaLock {\\n    struct FeeStruct {\\n        string name; // name by which the fee is accessed\\n        uint256 lpFee; // 100 = 1%, 10,000 = 100%\\n        uint256 collectFee; // 100 = 1%, 10,000 = 100%\\n        uint256 flatFee; // in amount tokens\\n        address flatFeeToken; // address(0) = ETH otherwise ERC20 address expected\\n    }\\n\\n    struct Lock {\\n        uint256 lock_id; // unique nonce per lock\\n        INonfungiblePositionManager nftPositionManager; // the nft position manager of the uniswap fork\\n        address pool; // the pool address\\n        uint256 nft_id; // the nft token id of the nft belonging to the nftPositionManager (there could be two nfts with id = 1, belonging to different amm forks and position managers)\\n        address owner; // the owner who can collect and withdraw\\n        address pendingOwner; //  two step process ownership transfer, the pending owner must accept ownership to own the lock\\n        address additionalCollector; // an additional address allowed to call collect (ideal for contracts to auto collect without having to use owner)\\n        address collectAddress; // The address to which automatic collections are sent\\n        uint256 unlockDate; // unlock date of the lock in seconds\\n        uint256 ucf; // collect fee\\n    }\\n\\n    struct LockParams {\\n        INonfungiblePositionManager nftPositionManager; // the NFT Position manager of the Uniswap V3 fork\\n        uint256 nft_id; // the nft token_id\\n        address dustRecipient; // receiver of dust tokens which do not fit into liquidity and initial collection fees\\n        address owner; // owner of the lock\\n        address additionalCollector; // an additional address allowed to call collect (ideal for contracts to auto collect without having to use owner)\\n        address collectAddress; // The address to which automatic collections are sent\\n        uint256 unlockDate; // unlock date of the lock in seconds\\n        string feeName; // The fee name key you wish to accept, use \\\"DEFAULT\\\" if in doubt\\n        bytes[] r; // use an empty array => []\\n    }\\n\\n    // User functions\\n    function lock (LockParams calldata params) external payable returns (uint256 lockId);\\n    function lockAndConvert (LockParams calldata params) external payable returns (uint256 lockId);\\n    function collect (uint256 lockId, address recipient, uint128 amount0Max, uint128 amount1Max) external returns (uint256 amount0, uint256 amount1, uint256 fee0, uint256 fee1);\\n    function withdraw (uint256 lockId, address receiver) external;\\n    function relock(uint256 lockId, uint256 unlockDate) external;\\n    function setAdditionalCollector (uint256 lockId, address additionalCollector) external;\\n    function setCollectAddress (uint256 lockId, address collectAddress) external;\\n    function transferLockOwnership (uint256 lockId, address newOwner) external;\\n    function acceptLockOwnership (uint256 lockId) external;\\n    function decreaseLiquidity(uint256 lockId, INonfungiblePositionManager.DecreaseLiquidityParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n    function increaseLiquidity(uint256 lockId, INonfungiblePositionManager.IncreaseLiquidityParams calldata params) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n    // Admin functions\\n    function setUCF(uint256 lockId, uint256 ucf) external;\\n\\n    // Getters\\n    function getLocksLength() external view returns (uint256);\\n    function getLock(uint256 lockId) external view returns (Lock memory lock);\\n\\n    function getNumUserLocks(address user) external view returns (uint256 numLocks);\\n    function getUserLockAtIndex(address user, uint256 index) external view returns (Lock memory lock);\\n\\n    function getFee (string memory name) external view returns (FeeStruct memory);\\n    function getAmountsForLiquidity (int24 currentTick, int24 tickLower, int24 tickHigher, uint128 liquidity) external pure returns (uint256 amount0, uint256 amount1);\\n\\n    // Events\\n    event onLock(\\n        uint256 lock_id,\\n        address nftPositionManager,\\n        uint256 nft_id,\\n        address owner,\\n        address additionalCollector,\\n        address collectAddress,\\n        uint256 unlockDate,\\n        uint256 collectFee,\\n        address poolAddress,\\n        INonfungiblePositionManager.Position position\\n    );\\n\\n    event onWithdraw(uint256 lock_id, address owner, address receiver);\\n\\n    event onLockOwnershipTransferStarted(uint256 lockId, address currentOwner, address pendingOwner);\\n\\n    event onTransferLockOwnership(uint256 lockId, address oldOwner, address newOwner);\\n\\n    event onSetAdditionalCollector(uint256 lockId, address additionalCollector);\\n\\n    event onSetCollectAddress(uint256 lockId, address collectAddress);\\n\\n    event onSetMigrator(address migrator);\\n\\n    event onRelock(uint256 lockId, uint256 unlockDate);\\n\\n    event onIncreaseLiquidity(uint256 lockId);\\n\\n    event onDecreaseLiquidity(uint256 lockId);\\n\\n    event onRemoveFee(bytes32 nameHash);\\n\\n    event onAddFee(bytes32 nameHash, string name, uint256 lpFee, uint256 collectFee, uint256 flatFee, address flatFeeToken);\\n\\n    event onEditFee(bytes32 nameHash, string name, uint256 lpFee, uint256 collectFee, uint256 flatFee, address flatFeeToken);\\n\\n    event onSetUCF(uint256 lockId, uint256 ucf);\\n    \\n}\",\"keccak256\":\"0x55fbab0da8287fe7f41030012d811b662c3accbc5998fca456b2ac24bbe264ac\",\"license\":\"UNLICENSED\"},\"contracts/locker/LenaLock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../dex/libraries/TransferHelper.sol\\\";\\n\\nimport \\\"./univ3/TickMath.sol\\\";\\nimport \\\"./univ3/LiquidityAmounts.sol\\\";\\nimport {INonfungiblePositionManager} from \\\"../dex/UniV3/INonfungiblePositionManager.sol\\\";\\nimport \\\"./ILenaLock.sol\\\";\\n\\n/*\\n    \\n    The Lena Lock UniV3 Contract locks any exact fork of Uniswap V3's liquidity NFT's in this contract.\\n\\n    Since liquidity means so much to all ecosystem participants, this contract converts a UniV3 position to full range, from the absolute \\n    minimum lowerTick to the absolute maximum upperTick, creating a reliable pool where tokens will be tradeable at any price.\\n\\n    Lock owners are still free to collect fees as they please, and add liquidity to their position, while the liquidity remains locked.\\n\\n    You can also still view your NFT and its metrics on uniswap while it is locked. e.g. https://app.uniswap.org/#/pools/69\\n*/\\n\\ninterface IFeeResolver {\\n\\tfunction useFee(\\n\\t\\tbytes[] memory r,\\n\\t\\taddress sender\\n\\t) external returns (ILenaLock.FeeStruct memory fee);\\n}\\n\\ncontract LenaLock is\\n\\tILenaLock,\\n\\tOwnable2Step,\\n\\tIERC721Receiver,\\n\\tReentrancyGuard\\n{\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\tusing EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n\\tmapping(bytes32 => FeeStruct) private FEES; // map keccak(fee_name) to fee struct e.g. keccak256(\\\"DEFAULT\\\") => FeeStruct\\n\\tEnumerableSet.Bytes32Set private FEE_LOOKUP; // contains keccak(feeName)\\n\\n\\tIFeeResolver public FEE_RESOLVER; // Resolve R fees\\n\\n\\taddress public AUTO_COLLECT_ACCOUNT; // account controlled by Lena to auto collect fees if a fee option involving collection fees was accepted\\n\\taddress payable public FEE_ADDR_LP; // LP fee destination\\n\\taddress payable public FEE_ADDR_COLLECT; // collect fee destination\\n\\tuint256 public constant FEE_DENOMINATOR = 10000; // denominator for all fees\\n\\n\\tuint256 public NONCE = 0; // incremental lock nonce counter, this is the unique ID for the next lock\\n\\n\\t// If a locks unlock date is set to ETERNAL_LOCK the lock is eternal and not ever withdrawable.\\n\\t// It can however be migrated by the owner to future AMMS and is therefore preferrable to burning liquidity, or sending liquidity NFT's to the dead address.\\n\\tuint256 public ETERNAL_LOCK = type(uint256).max;\\n\\n\\t// a mapping of lock_id => Lock\\n\\tmapping(uint256 => Lock) public LOCKS;\\n\\n\\tmapping(address => EnumerableSet.UintSet) USER_LOCKS; // a set of all lock_ids owned by a user, useful for on chain enumeration.\\n\\n\\t// Mapping to track whitelisted addresses\\n\\tmapping(address => bool) public whitelisted;\\n\\n\\t// Event for tracking whitelist changes\\n\\tevent WhitelistUpdated(address indexed account, bool isWhitelisted);\\n\\n\\tconstructor(\\n\\t\\taddress payable _autoCollectAddress,\\n\\t\\taddress payable _lpFeeReceiver,\\n\\t\\taddress payable _collectFeeReceiver\\n\\t) Ownable(msg.sender) {\\n\\t\\tAUTO_COLLECT_ACCOUNT = _autoCollectAddress;\\n\\t\\tFEE_ADDR_LP = _lpFeeReceiver;\\n\\t\\tFEE_ADDR_COLLECT = _collectFeeReceiver;\\n\\t\\taddOrEditFee(\\\"DEFAULT\\\", 50, 200, 0, address(0));\\n\\t\\taddOrEditFee(\\\"LVP\\\", 80, 100, 0, address(0));\\n\\t\\taddOrEditFee(\\\"LLP\\\", 30, 350, 0, address(0));\\n\\t}\\n\\n\\tfunction setFeeResolver(IFeeResolver _resolver) external onlyOwner {\\n\\t\\tFEE_RESOLVER = _resolver;\\n\\t}\\n\\n\\tfunction setFeeParams(\\n\\t\\taddress _autoCollectAccount,\\n\\t\\taddress payable _lpFeeReceiver,\\n\\t\\taddress payable _collectFeeReceiver\\n\\t) external onlyOwner {\\n\\t\\tAUTO_COLLECT_ACCOUNT = _autoCollectAccount;\\n\\t\\tFEE_ADDR_LP = _lpFeeReceiver;\\n\\t\\tFEE_ADDR_COLLECT = _collectFeeReceiver;\\n\\t}\\n\\n\\tfunction addOrEditFee(\\n\\t\\tstring memory _name,\\n\\t\\tuint256 _lpFee,\\n\\t\\tuint256 _collectFee,\\n\\t\\tuint256 _flatFee,\\n\\t\\taddress _flatFeeToken\\n\\t) public onlyOwner {\\n\\t\\tbytes32 nameHash = keccak256(abi.encodePacked(_name));\\n\\n\\t\\tFeeStruct memory newFee = FeeStruct(\\n\\t\\t\\t_name,\\n\\t\\t\\t_lpFee,\\n\\t\\t\\t_collectFee,\\n\\t\\t\\t_flatFee,\\n\\t\\t\\t_flatFeeToken\\n\\t\\t);\\n\\t\\tFEES[nameHash] = newFee;\\n\\n\\t\\tif (!FEE_LOOKUP.contains(nameHash)) {\\n\\t\\t\\tFEE_LOOKUP.add(nameHash);\\n\\t\\t\\temit onAddFee(\\n\\t\\t\\t\\tnameHash,\\n\\t\\t\\t\\tnewFee.name,\\n\\t\\t\\t\\tnewFee.lpFee,\\n\\t\\t\\t\\tnewFee.collectFee,\\n\\t\\t\\t\\tnewFee.flatFee,\\n\\t\\t\\t\\tnewFee.flatFeeToken\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\temit onEditFee(\\n\\t\\t\\t\\tnameHash,\\n\\t\\t\\t\\tnewFee.name,\\n\\t\\t\\t\\tnewFee.lpFee,\\n\\t\\t\\t\\tnewFee.collectFee,\\n\\t\\t\\t\\tnewFee.flatFee,\\n\\t\\t\\t\\tnewFee.flatFeeToken\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction removeFee(string memory _name) external onlyOwner {\\n\\t\\tbytes32 nameHash = keccak256(abi.encodePacked(_name));\\n\\t\\trequire(nameHash != keccak256(abi.encodePacked(\\\"DEFAULT\\\")), \\\"DEFAULT\\\");\\n\\t\\trequire(FEE_LOOKUP.contains(nameHash));\\n\\t\\tFEE_LOOKUP.remove(nameHash);\\n\\t\\temit onRemoveFee(nameHash);\\n\\t}\\n\\n\\tfunction getFee(\\n\\t\\tstring memory _name\\n\\t) public view override returns (FeeStruct memory) {\\n\\t\\tbytes32 feeHash = keccak256(abi.encodePacked(_name));\\n\\t\\trequire(FEE_LOOKUP.contains(feeHash), \\\"NOT FOUND\\\");\\n\\t\\treturn FEES[feeHash];\\n\\t}\\n\\n\\tfunction getFeeOptionAtIndex(\\n\\t\\tuint256 _index\\n\\t) external view returns (FeeStruct memory) {\\n\\t\\treturn FEES[FEE_LOOKUP.at(_index)];\\n\\t}\\n\\n\\tfunction getFeeOptionLength() external view returns (uint256) {\\n\\t\\treturn FEE_LOOKUP.length();\\n\\t}\\n\\n\\tfunction deductFlatFee(FeeStruct memory fee) private {\\n\\t\\tif (fee.flatFeeToken == address(0)) {\\n\\t\\t\\t// fee in gas token\\n\\t\\t\\trequire(msg.value == fee.flatFee, \\\"FLAT FEE\\\");\\n\\t\\t\\tFEE_ADDR_LP.transfer(fee.flatFee);\\n\\t\\t} else {\\n\\t\\t\\t// fee in another token\\n\\t\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\t\\tfee.flatFeeToken,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tFEE_ADDR_LP,\\n\\t\\t\\t\\tfee.flatFee\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n    @dev converts nft to full range and collects fees and sends them back to collector\\n    @param params The locking params as seen in ILenaLock.sol\\n    *\\n    * This function will fail if a liquidity position is out of range (100% token0, 0% token1) as it will not be able to create a full range position with counter liquidity.\\n    * This will also fail with rebasing tokens (liquidity nfts already stuck on univ3).\\n    */\\n\\tfunction lockAndConvert(\\n\\t\\tLockParams calldata params\\n\\t) external payable nonReentrant returns (uint256) {\\n\\t\\trequire(params.owner != address(0));\\n\\t\\trequire(params.collectAddress != address(0), \\\"COLLECT_ADDR\\\");\\n\\t\\trequire(\\n\\t\\t\\tparams.unlockDate < 1e10 || params.unlockDate == ETERNAL_LOCK,\\n\\t\\t\\t\\\"MILLISECONDS\\\"\\n\\t\\t); // prevents errors when timestamp entered in milliseconds\\n\\t\\trequire(params.unlockDate > block.timestamp, \\\"DATE PASSED\\\");\\n\\t\\tFeeStruct memory fee;\\n\\n\\t\\t\\n\\t\\t\\tif (params.r.length > 0) {\\n\\t\\t\\t\\tfee = FEE_RESOLVER.useFee(params.r, msg.sender);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfee = getFee(params.feeName);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (fee.flatFee > 0) {\\n\\t\\t\\t\\tdeductFlatFee(fee);\\n\\t\\t\\t}\\n\\t\\t\\n\\n\\t\\tparams.nftPositionManager.safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tparams.nft_id\\n\\t\\t);\\n\\n\\t\\tINonfungiblePositionManager.Position memory position;\\n\\t\\t(\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\t\\t\\tposition.token0,\\n\\t\\t\\tposition.token1,\\n\\t\\t\\tposition.fee,\\n\\t\\t\\tposition.tickLower,\\n\\t\\t\\tposition.tickUpper,\\n\\t\\t\\tposition.liquidity,\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\n\\t\\t) = params.nftPositionManager.positions(params.nft_id);\\n\\t\\tIUniswapV3Factory factory = IUniswapV3Factory(\\n\\t\\t\\tparams.nftPositionManager.factory()\\n\\t\\t);\\n\\t\\taddress pool = factory.getPool(\\n\\t\\t\\tposition.token0,\\n\\t\\t\\tposition.token1,\\n\\t\\t\\tposition.fee\\n\\t\\t);\\n\\t\\tint24 maxTick = tickSpacingToMaxTick(\\n\\t\\t\\tfactory.feeAmountTickSpacing(position.fee)\\n\\t\\t);\\n\\n\\t\\tuint256 nftId;\\n\\t\\tif (position.tickLower != -maxTick && position.tickUpper != maxTick) {\\n\\t\\t\\t// convert the position to full range by minting a new full range NFT\\n\\t\\t\\tnftId = _convertPositionToFullRange(\\n\\t\\t\\t\\tparams.nftPositionManager,\\n\\t\\t\\t\\tparams.nft_id,\\n\\t\\t\\t\\tposition,\\n\\t\\t\\t\\tmaxTick,\\n\\t\\t\\t\\tparams.dustRecipient\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tnftId = params.nft_id;\\n\\t\\t\\t// collect fees for user to prevent being charged a fee on existing fees\\n\\t\\t\\tparams.nftPositionManager.collect(\\n\\t\\t\\t\\tINonfungiblePositionManager.CollectParams(\\n\\t\\t\\t\\t\\tnftId,\\n\\t\\t\\t\\t\\tparams.dustRecipient,\\n\\t\\t\\t\\t\\ttype(uint128).max,\\n\\t\\t\\t\\t\\ttype(uint128).max\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Take lp fee\\n\\t\\tif (fee.lpFee > 0) {\\n\\t\\t\\tuint128 liquidity = _getLiquidity(params.nftPositionManager, nftId);\\n\\t\\t\\tparams.nftPositionManager.decreaseLiquidity(\\n\\t\\t\\t\\tINonfungiblePositionManager.DecreaseLiquidityParams(\\n\\t\\t\\t\\t\\tnftId,\\n\\t\\t\\t\\t\\tuint128((liquidity * fee.lpFee) / FEE_DENOMINATOR),\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\tparams.nftPositionManager.collect(\\n\\t\\t\\t\\tINonfungiblePositionManager.CollectParams(\\n\\t\\t\\t\\t\\tnftId,\\n\\t\\t\\t\\t\\tFEE_ADDR_LP,\\n\\t\\t\\t\\t\\ttype(uint128).max,\\n\\t\\t\\t\\t\\ttype(uint128).max\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tLock memory newLock;\\n\\t\\tnewLock.lock_id = NONCE;\\n\\t\\tnewLock.nftPositionManager = params.nftPositionManager;\\n\\t\\tnewLock.pool = pool;\\n\\t\\tnewLock.nft_id = nftId;\\n\\t\\tnewLock.owner = params.owner;\\n\\t\\tnewLock.additionalCollector = params.additionalCollector;\\n\\t\\tnewLock.collectAddress = params.collectAddress;\\n\\t\\tnewLock.unlockDate = params.unlockDate;\\n\\t\\tnewLock.ucf = fee.collectFee;\\n\\t\\tLOCKS[NONCE] = newLock;\\n\\t\\tUSER_LOCKS[params.owner].add(NONCE);\\n\\t\\tNONCE++;\\n\\n\\t\\temitLockEvent(newLock.lock_id);\\n\\n\\t\\treturn newLock.lock_id;\\n\\t}\\n\\n\\t/**\\n    @dev collects fees and sends them back to collector\\n    @param params The locking params as seen in ILenaLock.sol\\n    *\\n    * This will also fail with rebasing tokens (liquidity nfts already stuck on univ3).\\n\\t* Only whitelisted platforms can use this lock mechanism, such as projects with launchpads\\n    */\\n\\tfunction lock(\\n\\t\\tLockParams calldata params\\n\\t) external payable override nonReentrant onlyWhitelisted returns (uint256) {\\n\\t\\trequire(params.owner != address(0));\\n\\t\\trequire(params.collectAddress != address(0), \\\"COLLECT_ADDR\\\");\\n\\t\\trequire(\\n\\t\\t\\tparams.unlockDate < 1e10 || params.unlockDate == ETERNAL_LOCK,\\n\\t\\t\\t\\\"MILLISECONDS\\\"\\n\\t\\t); // prevents errors when timestamp entered in milliseconds\\n\\t\\trequire(params.unlockDate > block.timestamp, \\\"DATE PASSED\\\");\\n\\t\\tFeeStruct memory fee;\\n\\n\\t\\t\\tif (params.r.length > 0) {\\n\\t\\t\\t\\tfee = FEE_RESOLVER.useFee(params.r, msg.sender);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfee = getFee(params.feeName);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (fee.flatFee > 0) {\\n\\t\\t\\t\\tdeductFlatFee(fee);\\n\\t\\t\\t}\\n\\n\\t\\tparams.nftPositionManager.safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tparams.nft_id\\n\\t\\t);\\n\\n\\t\\tINonfungiblePositionManager.Position memory position;\\n\\t\\t(\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\t\\t\\tposition.token0,\\n\\t\\t\\tposition.token1,\\n\\t\\t\\tposition.fee,\\n\\t\\t\\tposition.tickLower,\\n\\t\\t\\tposition.tickUpper,\\n\\t\\t\\tposition.liquidity,\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\n\\t\\t) = params.nftPositionManager.positions(params.nft_id);\\n\\t\\tIUniswapV3Factory factory = IUniswapV3Factory(\\n\\t\\t\\tparams.nftPositionManager.factory()\\n\\t\\t);\\n\\t\\taddress pool = factory.getPool(\\n\\t\\t\\tposition.token0,\\n\\t\\t\\tposition.token1,\\n\\t\\t\\tposition.fee\\n\\t\\t);\\n\\n\\t\\tuint256 nftId;\\n\\t\\tnftId = params.nft_id;\\n\\t\\t// collect fees for user to prevent being charged a fee on existing fees\\n\\t\\tparams.nftPositionManager.collect(\\n\\t\\t\\tINonfungiblePositionManager.CollectParams(\\n\\t\\t\\t\\tnftId,\\n\\t\\t\\t\\tparams.dustRecipient,\\n\\t\\t\\t\\ttype(uint128).max,\\n\\t\\t\\t\\ttype(uint128).max\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\t// Take lp fee\\n\\t\\tif (fee.lpFee > 0) {\\n\\t\\t\\tuint128 liquidity = _getLiquidity(params.nftPositionManager, nftId);\\n\\t\\t\\tparams.nftPositionManager.decreaseLiquidity(\\n\\t\\t\\t\\tINonfungiblePositionManager.DecreaseLiquidityParams(\\n\\t\\t\\t\\t\\tnftId,\\n\\t\\t\\t\\t\\tuint128((liquidity * fee.lpFee) / FEE_DENOMINATOR),\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\tparams.nftPositionManager.collect(\\n\\t\\t\\t\\tINonfungiblePositionManager.CollectParams(\\n\\t\\t\\t\\t\\tnftId,\\n\\t\\t\\t\\t\\tFEE_ADDR_LP,\\n\\t\\t\\t\\t\\ttype(uint128).max,\\n\\t\\t\\t\\t\\ttype(uint128).max\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tLock memory newLock;\\n\\t\\tnewLock.lock_id = NONCE;\\n\\t\\tnewLock.nftPositionManager = params.nftPositionManager;\\n\\t\\tnewLock.pool = pool;\\n\\t\\tnewLock.nft_id = nftId;\\n\\t\\tnewLock.owner = params.owner;\\n\\t\\tnewLock.additionalCollector = params.additionalCollector;\\n\\t\\tnewLock.collectAddress = params.collectAddress;\\n\\t\\tnewLock.unlockDate = params.unlockDate;\\n\\t\\tnewLock.ucf = fee.collectFee;\\n\\t\\tLOCKS[NONCE] = newLock;\\n\\t\\tUSER_LOCKS[params.owner].add(NONCE);\\n\\t\\tNONCE++;\\n\\n\\t\\temitLockEvent(newLock.lock_id);\\n\\n\\t\\treturn newLock.lock_id;\\n\\t}\\n\\n\\tfunction emitLockEvent(uint256 _lockId) private {\\n\\t\\tLock memory newLock = LOCKS[_lockId];\\n\\t\\tINonfungiblePositionManager.Position memory position;\\n\\t\\t(\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\t\\t\\tposition.token0,\\n\\t\\t\\tposition.token1,\\n\\t\\t\\tposition.fee,\\n\\t\\t\\tposition.tickLower,\\n\\t\\t\\tposition.tickUpper,\\n\\t\\t\\tposition.liquidity,\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\n\\t\\t) = newLock.nftPositionManager.positions(newLock.nft_id);\\n\\t\\temit onLock(\\n\\t\\t\\tnewLock.lock_id,\\n\\t\\t\\taddress(newLock.nftPositionManager),\\n\\t\\t\\tnewLock.nft_id,\\n\\t\\t\\tnewLock.owner,\\n\\t\\t\\tnewLock.additionalCollector,\\n\\t\\t\\tnewLock.collectAddress,\\n\\t\\t\\tnewLock.unlockDate,\\n\\t\\t\\tnewLock.ucf,\\n\\t\\t\\tnewLock.pool,\\n\\t\\t\\tposition\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _convertPositionToFullRange(\\n\\t\\tINonfungiblePositionManager _nftPositionManager,\\n\\t\\tuint256 _tokenId,\\n\\t\\tINonfungiblePositionManager.Position memory _position,\\n\\t\\tint24 _maxTick,\\n\\t\\taddress _dustRecipient\\n\\t) private returns (uint256) {\\n\\t\\t_nftPositionManager.decreaseLiquidity(\\n\\t\\t\\tINonfungiblePositionManager.DecreaseLiquidityParams(\\n\\t\\t\\t\\t_tokenId,\\n\\t\\t\\t\\t_position.liquidity,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\t_nftPositionManager.collect(\\n\\t\\t\\tINonfungiblePositionManager.CollectParams(\\n\\t\\t\\t\\t_tokenId,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\ttype(uint128).max,\\n\\t\\t\\t\\ttype(uint128).max\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tINonfungiblePositionManager.MintParams\\n\\t\\t\\tmemory mintParams = _setPartialMintParamsFromPosition(\\n\\t\\t\\t\\t_nftPositionManager,\\n\\t\\t\\t\\t_tokenId\\n\\t\\t\\t);\\n\\n\\t\\tmintParams.deadline = block.timestamp;\\n\\t\\tmintParams.recipient = address(this);\\n\\t\\tmintParams.tickLower = -_maxTick;\\n\\t\\tmintParams.tickUpper = _maxTick;\\n\\t\\tmintParams.amount0Desired = IERC20(mintParams.token0).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\tmintParams.amount1Desired = IERC20(mintParams.token1).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\tmintParams.amount0Min = 0;\\n\\t\\tmintParams.amount1Min = 0;\\n\\n\\t\\tTransferHelper.safeApprove(\\n\\t\\t\\tmintParams.token0,\\n\\t\\t\\taddress(_nftPositionManager),\\n\\t\\t\\tmintParams.amount0Desired\\n\\t\\t);\\n\\t\\tTransferHelper.safeApprove(\\n\\t\\t\\tmintParams.token1,\\n\\t\\t\\taddress(_nftPositionManager),\\n\\t\\t\\tmintParams.amount1Desired\\n\\t\\t);\\n\\n\\t\\t(uint256 newNftId, , , ) = _nftPositionManager.mint(mintParams);\\n\\n\\t\\t_nftPositionManager.burn(_tokenId);\\n\\n\\t\\t// Refund the tokens which dont fit into full range liquidity\\n\\t\\tuint256 balance0 = IERC20(mintParams.token0).balanceOf(address(this));\\n\\t\\tuint256 balance1 = IERC20(mintParams.token1).balanceOf(address(this));\\n\\t\\tif (balance0 > 0) {\\n\\t\\t\\tTransferHelper.safeTransfer(\\n\\t\\t\\t\\tmintParams.token0,\\n\\t\\t\\t\\t_dustRecipient,\\n\\t\\t\\t\\tbalance0\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tif (balance1 > 0) {\\n\\t\\t\\tTransferHelper.safeTransfer(\\n\\t\\t\\t\\tmintParams.token1,\\n\\t\\t\\t\\t_dustRecipient,\\n\\t\\t\\t\\tbalance1\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\treturn newNftId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Collect fees to _recipient if msg.sender is the owner of _lockId\\n\\t */\\n\\tfunction collect(\\n\\t\\tuint256 _lockId,\\n\\t\\taddress _recipient,\\n\\t\\tuint128 _amount0Max,\\n\\t\\tuint128 _amount1Max\\n\\t)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 amount0, uint256 amount1, uint256 fee0, uint256 fee1)\\n\\t{\\n\\t\\t(amount0, amount1, fee0, fee1) = _collect(\\n\\t\\t\\t_lockId,\\n\\t\\t\\t_recipient,\\n\\t\\t\\t_amount0Max,\\n\\t\\t\\t_amount1Max\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private collect function, wrap this in re-entrancy guard calls\\n\\t */\\n\\tfunction _collect(\\n\\t\\tuint256 _lockId,\\n\\t\\taddress _recipient,\\n\\t\\tuint128 _amount0Max,\\n\\t\\tuint128 _amount1Max\\n\\t)\\n\\t\\tprivate\\n\\t\\treturns (uint256 amount0, uint256 amount1, uint256 fee0, uint256 fee1)\\n\\t{\\n\\t\\tLock memory userLock = LOCKS[_lockId];\\n\\t\\tbool collectorIsBot = AUTO_COLLECT_ACCOUNT == msg.sender;\\n\\t\\trequire(\\n\\t\\t\\tuserLock.owner == msg.sender ||\\n\\t\\t\\t\\tuserLock.additionalCollector == msg.sender ||\\n\\t\\t\\t\\tcollectorIsBot,\\n\\t\\t\\t\\\"OWNER\\\"\\n\\t\\t);\\n\\t\\tif (userLock.ucf == 0) {\\n\\t\\t\\t// No Protocol fee\\n\\t\\t\\t(amount0, amount1) = userLock.nftPositionManager.collect(\\n\\t\\t\\t\\tINonfungiblePositionManager.CollectParams(\\n\\t\\t\\t\\t\\tuserLock.nft_id,\\n\\t\\t\\t\\t\\t_recipient,\\n\\t\\t\\t\\t\\t_amount0Max,\\n\\t\\t\\t\\t\\t_amount1Max\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\t// Protocol fees\\n\\t\\t\\t(, , address _token0, address _token1, , , , , , , , ) = userLock\\n\\t\\t\\t\\t.nftPositionManager\\n\\t\\t\\t\\t.positions(userLock.nft_id);\\n\\t\\t\\tuserLock.nftPositionManager.collect(\\n\\t\\t\\t\\tINonfungiblePositionManager.CollectParams(\\n\\t\\t\\t\\t\\tuserLock.nft_id,\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t_amount0Max,\\n\\t\\t\\t\\t\\t_amount1Max\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\n\\t\\t\\tuint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n\\t\\t\\tuint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n\\t\\t\\taddress feeTo = collectorIsBot ? _recipient : FEE_ADDR_COLLECT;\\n\\t\\t\\taddress remainderTo = collectorIsBot\\n\\t\\t\\t\\t? userLock.collectAddress\\n\\t\\t\\t\\t: _recipient;\\n\\n\\t\\t\\tif (balance0 > 0) {\\n\\t\\t\\t\\tfee0 = (balance0 * userLock.ucf) / FEE_DENOMINATOR;\\n\\t\\t\\t\\tTransferHelper.safeTransfer(_token0, feeTo, fee0);\\n\\t\\t\\t\\tamount0 = balance0 - fee0;\\n\\t\\t\\t\\tTransferHelper.safeTransfer(_token0, remainderTo, amount0);\\n\\t\\t\\t}\\n\\t\\t\\tif (balance1 > 0) {\\n\\t\\t\\t\\tfee1 = (balance1 * userLock.ucf) / FEE_DENOMINATOR;\\n\\t\\t\\t\\tTransferHelper.safeTransfer(_token1, feeTo, fee1);\\n\\t\\t\\t\\tamount1 = balance1 - fee1;\\n\\t\\t\\t\\tTransferHelper.safeTransfer(_token1, remainderTo, amount1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev increases liquidity. Can be called by anyone.\\n\\t * You should ideally call increaseLiquidity from the NftPositionManager directly for gas efficiency.\\n\\t * This method is here just for convenience for some contracts which solely interact with the Lena lockers / lockIds\\n\\t */\\n\\tfunction increaseLiquidity(\\n\\t\\tuint256 _lockId,\\n\\t\\tINonfungiblePositionManager.IncreaseLiquidityParams calldata params\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\treturns (uint128 liquidity, uint256 amount0, uint256 amount1)\\n\\t{\\n\\t\\tLock memory userLock = LOCKS[_lockId];\\n\\t\\trequire(userLock.nft_id == params.tokenId, \\\"NFT ID\\\");\\n\\n\\t\\t(, , address token0, address token1, , , , , , , , ) = userLock\\n\\t\\t\\t.nftPositionManager\\n\\t\\t\\t.positions(userLock.nft_id);\\n\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\ttoken0,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tparams.amount0Desired\\n\\t\\t);\\n\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\ttoken1,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tparams.amount1Desired\\n\\t\\t);\\n\\t\\tTransferHelper.safeApprove(\\n\\t\\t\\ttoken0,\\n\\t\\t\\taddress(userLock.nftPositionManager),\\n\\t\\t\\tparams.amount0Desired\\n\\t\\t);\\n\\t\\tTransferHelper.safeApprove(\\n\\t\\t\\ttoken1,\\n\\t\\t\\taddress(userLock.nftPositionManager),\\n\\t\\t\\tparams.amount1Desired\\n\\t\\t);\\n\\n\\t\\t(liquidity, amount0, amount1) = userLock\\n\\t\\t\\t.nftPositionManager\\n\\t\\t\\t.increaseLiquidity(params);\\n\\t\\temit onIncreaseLiquidity(_lockId); // This can be called directly from the NFT position manager in which case this event won't fire\\n\\t}\\n\\n\\t/**\\n\\t * @dev decrease liquidity if a lock has expired (useful before relocking)\\n\\t */\\n\\tfunction decreaseLiquidity(\\n\\t\\tuint256 _lockId,\\n\\t\\tINonfungiblePositionManager.DecreaseLiquidityParams calldata params\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 amount0, uint256 amount1)\\n\\t{\\n\\t\\tisLockAdmin(_lockId);\\n\\t\\tLock memory userLock = LOCKS[_lockId];\\n\\t\\trequire(userLock.nft_id == params.tokenId, \\\"NFT ID\\\");\\n\\t\\tif (userLock.unlockDate == ETERNAL_LOCK) {\\n\\t\\t\\trevert(\\\"ETERNAL_LOCK\\\");\\n\\t\\t} else {\\n\\t\\t\\trequire(userLock.unlockDate < block.timestamp, \\\"NOT YET\\\");\\n\\t\\t}\\n\\t\\t(amount0, amount1) = userLock.nftPositionManager.decreaseLiquidity(\\n\\t\\t\\tparams\\n\\t\\t);\\n\\t\\tuserLock.nftPositionManager.collect(\\n\\t\\t\\tINonfungiblePositionManager.CollectParams(\\n\\t\\t\\t\\tuserLock.nft_id,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\ttype(uint128).max,\\n\\t\\t\\t\\ttype(uint128).max\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\temit onDecreaseLiquidity(_lockId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev set the unlock date further in the future\\n\\t */\\n\\tfunction relock(\\n\\t\\tuint256 _lockId,\\n\\t\\tuint256 _unlockDate\\n\\t) external override nonReentrant {\\n\\t\\tisLockAdmin(_lockId);\\n\\t\\tLock storage userLock = LOCKS[_lockId];\\n\\t\\trequire(_unlockDate > userLock.unlockDate, \\\"DATE\\\");\\n\\t\\trequire(_unlockDate > block.timestamp, \\\"DATE PASSED\\\");\\n\\t\\trequire(\\n\\t\\t\\t_unlockDate < 1e10 || _unlockDate == ETERNAL_LOCK,\\n\\t\\t\\t\\\"MILLISECONDS\\\"\\n\\t\\t); // prevents errors when timestamp entered in milliseconds\\n\\t\\tuserLock.unlockDate = _unlockDate;\\n\\t\\temit onRelock(_lockId, userLock.unlockDate);\\n\\t}\\n\\n\\t/**\\n\\t * @dev withdraw a UniV3 liquidity NFT and send it to _receiver\\n\\t * Only callable once unlockDate has expired\\n\\t */\\n\\tfunction withdraw(\\n\\t\\tuint256 _lockId,\\n\\t\\taddress _receiver\\n\\t) external override nonReentrant {\\n\\t\\tisLockAdmin(_lockId);\\n\\t\\tLock memory userLock = LOCKS[_lockId];\\n\\t\\tif (userLock.unlockDate == ETERNAL_LOCK) {\\n\\t\\t\\trevert(\\\"ETERNAL_LOCK\\\");\\n\\t\\t} else {\\n\\t\\t\\trequire(userLock.unlockDate < block.timestamp, \\\"NOT YET\\\");\\n\\t\\t}\\n\\n\\t\\tif (userLock.ucf > 0) {\\n\\t\\t\\t_collect(_lockId, _receiver, type(uint128).max, type(uint128).max);\\n\\t\\t}\\n\\n\\t\\tuserLock.nftPositionManager.safeTransferFrom(\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_receiver,\\n\\t\\t\\tuserLock.nft_id\\n\\t\\t);\\n\\t\\tUSER_LOCKS[userLock.owner].remove(_lockId);\\n\\n\\t\\temit onWithdraw(_lockId, userLock.owner, _receiver);\\n\\n\\t\\tdelete LOCKS[_lockId]; // clear the state for this lock (reset all values to zero)\\n\\t}\\n\\n\\t/**\\n\\t * @dev allow a lock owner to add an additional address, usually a contract, to collect fees. Useful for bots\\n\\t */\\n\\tfunction setAdditionalCollector(\\n\\t\\tuint256 _lockId,\\n\\t\\taddress _additionalCollector\\n\\t) external override nonReentrant {\\n\\t\\tisLockAdmin(_lockId);\\n\\t\\tLock storage userLock = LOCKS[_lockId];\\n\\t\\tuserLock.additionalCollector = _additionalCollector;\\n\\n\\t\\temit onSetAdditionalCollector(_lockId, _additionalCollector);\\n\\t}\\n\\n\\t/**\\n\\t * @dev set the adress to which fees are automatically collected\\n\\t */\\n\\tfunction setCollectAddress(\\n\\t\\tuint256 _lockId,\\n\\t\\taddress _collectAddress\\n\\t) external override nonReentrant {\\n\\t\\tisLockAdmin(_lockId);\\n\\t\\trequire(_collectAddress != address(0), \\\"COLLECT_ADDR\\\");\\n\\t\\tLock storage userLock = LOCKS[_lockId];\\n\\t\\tuserLock.collectAddress = _collectAddress;\\n\\n\\t\\temit onSetCollectAddress(_lockId, _collectAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @dev transfer ownership of a lock to _newOwner\\n\\t */\\n\\tfunction transferLockOwnership(\\n\\t\\tuint256 _lockId,\\n\\t\\taddress _newOwner\\n\\t) external override nonReentrant {\\n\\t\\tisLockAdmin(_lockId);\\n\\t\\trequire(msg.sender != _newOwner, \\\"SAME OWNER\\\");\\n\\t\\tLock storage userLock = LOCKS[_lockId];\\n\\t\\tuserLock.pendingOwner = _newOwner;\\n\\n\\t\\temit onLockOwnershipTransferStarted(_lockId, msg.sender, _newOwner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev accept lock ownership transfer\\n\\t */\\n\\tfunction acceptLockOwnership(\\n\\t\\tuint256 _lockId\\n\\t) external override nonReentrant {\\n\\t\\tLock storage userLock = LOCKS[_lockId];\\n\\t\\trequire(userLock.pendingOwner == msg.sender, \\\"OWNER\\\");\\n\\n\\t\\taddress oldOwner = userLock.owner;\\n\\t\\tUSER_LOCKS[userLock.owner].remove(_lockId);\\n\\t\\tuserLock.owner = msg.sender;\\n\\t\\tuserLock.pendingOwner = address(0);\\n\\t\\tUSER_LOCKS[msg.sender].add(_lockId);\\n\\n\\t\\temit onTransferLockOwnership(_lockId, oldOwner, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev set ucf\\n\\t */\\n\\tfunction setUCF(uint256 _lockId, uint256 _ucf) external override onlyOwner {\\n\\t\\tLock storage l = LOCKS[_lockId];\\n\\t\\trequire(_ucf < l.ucf, \\\"L\\\");\\n\\t\\tl.ucf = _ucf;\\n\\t\\temit onSetUCF(_lockId, _ucf);\\n\\t}\\n\\n\\t/**\\n\\t * @dev check if msg.sender is the owner of lock with _lockId\\n\\t */\\n\\tfunction isLockAdmin(uint256 _lockId) private view {\\n\\t\\tLock memory userLock = LOCKS[_lockId];\\n\\t\\trequire(userLock.owner == msg.sender, \\\"OWNER\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns a Lock struct for _lockId\\n\\t */\\n\\tfunction getLock(\\n\\t\\tuint256 _lockId\\n\\t) external view override returns (Lock memory _lock) {\\n\\t\\t_lock = LOCKS[_lockId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev gets the number of unique locks in this contract, used to page through the lock array (includes expired and withdrawn locks)\\n\\t */\\n\\tfunction getLocksLength() external view override returns (uint256) {\\n\\t\\treturn NONCE;\\n\\t}\\n\\n\\t/**\\n\\t * @dev gets the number of locks for a user\\n\\t */\\n\\tfunction getNumUserLocks(\\n\\t\\taddress _user\\n\\t) external view override returns (uint256) {\\n\\t\\treturn USER_LOCKS[_user].length();\\n\\t}\\n\\n\\t/**\\n\\t * @dev gets the lock at a specific index for a user\\n\\t */\\n\\tfunction getUserLockAtIndex(\\n\\t\\taddress _user,\\n\\t\\tuint256 _index\\n\\t) external view override returns (Lock memory) {\\n\\t\\treturn LOCKS[USER_LOCKS[_user].at(_index)];\\n\\t}\\n\\n\\t/**\\n\\t * @dev gets the maximum tick for a tickSpacing\\n\\t * source: https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/Tick.sol\\n\\t */\\n\\tfunction tickSpacingToMaxTick(\\n\\t\\tint24 tickSpacing\\n\\t) public pure returns (int24 maxTick) {\\n\\t\\tmaxTick = (887272 / tickSpacing) * tickSpacing;\\n\\t}\\n\\n\\tfunction _setPartialMintParamsFromPosition(\\n\\t\\tINonfungiblePositionManager _nftPositionManager,\\n\\t\\tuint256 _tokenId\\n\\t) private view returns (INonfungiblePositionManager.MintParams memory) {\\n\\t\\tINonfungiblePositionManager.MintParams memory m;\\n\\t\\t(, , m.token0, m.token1, m.fee, , , , , , , ) = _nftPositionManager\\n\\t\\t\\t.positions(_tokenId);\\n\\t\\treturn m;\\n\\t}\\n\\n\\t/**\\n\\t * @dev get a locks liquidity in amounts of token0 and token1 for a generic position (not from state)\\n\\t */\\n\\tfunction getAmountsForLiquidity(\\n\\t\\tint24 currentTick,\\n\\t\\tint24 tickLower,\\n\\t\\tint24 tickHigher,\\n\\t\\tuint128 liquidity\\n\\t) public pure override returns (uint256 amount0, uint256 amount1) {\\n\\t\\treturn\\n\\t\\t\\tLiquidityAmounts.getAmountsForLiquidity(\\n\\t\\t\\t\\tTickMath.getSqrtRatioAtTick(currentTick),\\n\\t\\t\\t\\tTickMath.getSqrtRatioAtTick(tickLower),\\n\\t\\t\\t\\tTickMath.getSqrtRatioAtTick(tickHigher),\\n\\t\\t\\t\\tliquidity\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns just the liquidity value from a position\\n\\t */\\n\\tfunction _getLiquidity(\\n\\t\\tINonfungiblePositionManager _nftPositionManager,\\n\\t\\tuint256 _tokenId\\n\\t) private view returns (uint128) {\\n\\t\\t(, , , , , , , uint128 liquidity, , , , ) = _nftPositionManager\\n\\t\\t\\t.positions(_tokenId);\\n\\t\\treturn liquidity;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows admin to remove any eth mistakenly sent to the contract\\n\\t */\\n\\tfunction adminRefundEth(\\n\\t\\tuint256 _amount,\\n\\t\\taddress payable _receiver\\n\\t) external onlyOwner nonReentrant {\\n\\t\\t_receiver.transfer(_amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows admin to remove any ERC20's mistakenly sent to the contract\\n\\t * Since this contract is only for locking NFT liquidity, this allows removal of ERC20 tokens and cannot remove locked NFT liquidity.\\n\\t */\\n\\tfunction adminRefundERC20(\\n\\t\\taddress _token,\\n\\t\\taddress _receiver,\\n\\t\\tuint256 _amount\\n\\t) external onlyOwner nonReentrant {\\n\\t\\t// TransferHelper.safeTransfer = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n\\t\\t// Attempting to transfer nfts with this function (substituting a nft_id for _amount) wil fail with 'ST' as NFTS do not have the same interface\\n\\t\\tTransferHelper.safeTransfer(_token, _receiver, _amount);\\n\\t}\\n\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) public pure override returns (bytes4) {\\n\\t\\treturn IERC721Receiver.onERC721Received.selector;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier to restrict access to whitelisted addresses\\n\\t */\\n\\tmodifier onlyWhitelisted() {\\n\\t\\trequire(whitelisted[msg.sender], \\\"Caller is not whitelisted\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to add or remove addresses from whitelist (only owner)\\n\\t */\\n\\tfunction updateWhitelist(address account, bool isWhitelisted) external onlyOwner {\\n\\t\\twhitelisted[account] = isWhitelisted;\\n\\t\\temit WhitelistUpdated(account, isWhitelisted);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to add multiple addresses to whitelist at once (only owner)\\n\\t */\\n\\tfunction batchUpdateWhitelist(address[] calldata accounts, bool isWhitelisted) external onlyOwner {\\n\\t\\tfor (uint256 i = 0; i < accounts.length; i++) {\\n\\t\\t\\twhitelisted[accounts[i]] = isWhitelisted;\\n\\t\\t\\temit WhitelistUpdated(accounts[i], isWhitelisted);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to check if an address is whitelisted\\n\\t */\\n\\tfunction isWhitelisted(address account) external view returns (bool) {\\n\\t\\treturn whitelisted[account];\\n\\t}\\n}\\n\",\"keccak256\":\"0x304e234382725053f0a71151df63630ace0a335e13f2681a5a9356d1b87b43f0\",\"license\":\"UNLICENSED\"},\"contracts/locker/univ3/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Sourced from OpenZepplin but edited to remove un-needed functions\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary FullMath {\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n}\",\"keccak256\":\"0xbfe0021ef9da78b95871a589d1af250cb482e659b3d11befbde875f97d26a7de\",\"license\":\"MIT\"},\"contracts/locker/univ3/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {FullMath} from \\\"./FullMath.sol\\\";\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\",\"keccak256\":\"0x458a5858f3fbf38e192e5f7d162cb69e44b0b6ef1a04b80d522963ee58a8b739\",\"license\":\"GPL-2.0-or-later\"},\"contracts/locker/univ3/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO =\\n        1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick)\\n        internal\\n        pure\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        uint256 absTick =\\n            tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n\\n        // EDIT: 0.8 compatibility\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio =\\n            absTick & 0x1 != 0\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\n                : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0)\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0)\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0)\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0)\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0)\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0)\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0)\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0)\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0)\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0)\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0)\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0)\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0)\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0)\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0)\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0)\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0)\\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0)\\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0)\\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160(\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n        );\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96)\\n        internal\\n        pure\\n        returns (int24 tick)\\n    {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(\\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n            \\\"R\\\"\\n        );\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow =\\n            int24(\\n                (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n            );\\n        int24 tickHi =\\n            int24(\\n                (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n            );\\n\\n        tick = tickLow == tickHi\\n            ? tickLow\\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\n            ? tickHi\\n            : tickLow;\\n    }\\n}\",\"keccak256\":\"0xcd70cc25e70e6ded9e5a3fda488bb0cb9b28931eb4b1fe3f9f94c92ba131dee6\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000600a55600019600b5534801561001b57600080fd5b5060405161654a38038061654a83398101604081905261003a916103f5565b338061006157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61006a81610133565b506001600255600780546001600160a01b038086166001600160a01b031992831617835560088054868316908416179055600980549185169190921617905560408051808201909152908152661111519055531560ca1b60208201526100d690603260c860008061014f565b60408051808201909152600381526204c56560ec1b6020820152610100906050606460008061014f565b60408051808201909152600381526204c4c560ec1b602082015261012b90601e61015e60008061014f565b505050610634565b600180546001600160a01b031916905561014c816102e7565b50565b610157610337565b60008560405160200161016a919061045c565b60408051601f19818403018152828252805160209182012060a084018352898452838201899052838301889052606084018790526001600160a01b0386166080850152600081815260039092529190208251919350829181906101cd9082610517565b50602082015160018201556040820151600282015560608201516003820155608090910151600491820180546001600160a01b0319166001600160a01b0390921691909117905561021e9083610366565b6102885761022d600483610383565b507f335d96fad821252e8298f51336937e44332b3731a3c3f249b2cdb77652b33e4f828260000151836020015184604001518560600151866080015160405161027b969594939291906105d5565b60405180910390a16102de565b7fdd151e7029525c623e7c09af0f71271bd7642edd1bf2f64d97bc552faba7c86d82826000015183602001518460400151856060015186608001516040516102d5969594939291906105d5565b60405180910390a15b50505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146103645760405163118cdaa760e01b8152336004820152602401610058565b565b600081815260018301602052604081205415155b90505b92915050565b600061037a838360008181526001830160205260408120546103d15750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561037d565b50600061037d565b80516001600160a01b03811681146103f057600080fd5b919050565b60008060006060848603121561040a57600080fd5b610413846103d9565b9250610421602085016103d9565b915061042f604085016103d9565b90509250925092565b60005b8381101561045357818101518382015260200161043b565b50506000910152565b6000825161046e818460208701610438565b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806104a257607f821691505b6020821081036104c257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561051257806000526020600020601f840160051c810160208510156104ef5750805b601f840160051c820191505b8181101561050f57600081556001016104fb565b50505b505050565b81516001600160401b0381111561053057610530610478565b6105448161053e845461048e565b846104c8565b6020601f82116001811461057857600083156105605750848201515b600019600385901b1c1916600184901b17845561050f565b600084815260208120601f198516915b828110156105a85787850151825560209485019460019092019101610588565b50848210156105c65786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b86815260c06020820152600086518060c08401526105fa8160e0850160208b01610438565b604083019690965250606081019390935260808301919091526001600160a01b031660a082015260e0601f909201601f1916010192915050565b615f07806106436000396000f3fe6080604052600436106102715760003560e01c80639f185a0b1161014f578063d73792a9116100c1578063e7a7bdfe1161007a578063e7a7bdfe146108b3578063ed1eee68146108d3578063ef248944146108f3578063f11478f814610913578063f2fde38b14610926578063fae2e6481461094657600080fd5b8063d73792a9146107f3578063d7dc872914610809578063d936547e1461081c578063e091dd1a1461084c578063e30c397814610862578063e526dd481461088057600080fd5b8063b707a28811610113578063b707a28814610680578063c8be1b61146106a0578063cf0d5af3146106b3578063d1f55d4514610793578063d5fdb732146107b3578063d68f4dd1146107d357600080fd5b80639f185a0b146105be578063a339df12146105eb578063ab9ae18014610620578063ac4521c614610640578063b2fb30cb1461066057600080fd5b80633af32abf116101e8578063611f6fe6116101ac578063611f6fe614610513578063715018a61461053357806375eb8e691461054857806379ba50971461055e57806383fb69ad146105735780638da5cb5b146105a057600080fd5b80633af32abf1461045557806345908a471461049e578063489c18b0146104be5780635a04fb69146104d3578063611274c5146104f357600080fd5b80630d392cd91161023a5780630d392cd914610338578063150b7a0214610358578063186941551461039d5780631f113fc3146103d5578063260e12b0146103f5578063280f38671461043557600080fd5b8062f714ce14610276578063038975a114610298578063066b58c7146102c057806309564ab0146102f85780630ae300bf14610318575b600080fd5b34801561028257600080fd5b50610296610291366004614cad565b610966565b005b3480156102a457600080fd5b506102ad610c0f565b6040519081526020015b60405180910390f35b3480156102cc57600080fd5b506007546102e0906001600160a01b031681565b6040516001600160a01b0390911681526020016102b7565b34801561030457600080fd5b50610296610313366004614cdd565b610c20565b34801561032457600080fd5b506008546102e0906001600160a01b031681565b34801561034457600080fd5b50610296610353366004614d36565b610c67565b34801561036457600080fd5b50610384610373366004614d64565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016102b7565b6103b06103ab366004614e03565b610cce565b604080516001600160801b0390941684526020840192909252908201526060016102b7565b3480156103e157600080fd5b506009546102e0906001600160a01b031681565b34801561040157600080fd5b50610415610410366004614e50565b610f67565b6040805194855260208501939093529183015260608201526080016102b7565b34801561044157600080fd5b50610296610450366004614ea3565b610fa0565b34801561046157600080fd5b5061048e610470366004614ee4565b6001600160a01b03166000908152600e602052604090205460ff1690565b60405190151581526020016102b7565b3480156104aa57600080fd5b506102966104b9366004614f01565b610fca565b3480156104ca57600080fd5b50600a546102ad565b3480156104df57600080fd5b506102966104ee366004614cad565b6110c5565b3480156104ff57600080fd5b5061029661050e366004614f1a565b61119a565b34801561051f57600080fd5b506102ad61052e366004614ee4565b61127a565b34801561053f57600080fd5b506102966112a1565b34801561055457600080fd5b506102ad600b5481565b34801561056a57600080fd5b506102966112b5565b34801561057f57600080fd5b5061059361058e366004614f01565b6112f6565b6040516102b79190614fe6565b3480156105ac57600080fd5b506000546001600160a01b03166102e0565b3480156105ca57600080fd5b506105de6105d936600461503e565b6113f0565b6040516102b7919061506a565b3480156105f757600080fd5b5061060b61060636600461514d565b6114bc565b604080519283526020830191909152016102b7565b34801561062c57600080fd5b5061029661063b366004614cad565b6114f1565b34801561064c57600080fd5b5061029661065b366004614cad565b611542565b34801561066c57600080fd5b5061029661067b36600461518e565b6115b7565b34801561068c57600080fd5b5061029661069b366004614cad565b61169e565b6102ad6106ae3660046151b0565b611739565b3480156106bf57600080fd5b506107336106ce366004614f01565b600c60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460099099015497986001600160a01b0397881698968816979596948616959384169492841693909116918a565b604080519a8b526001600160a01b03998a1660208c0152978916978a01979097526060890195909552928616608088015290851660a0870152841660c086015290921660e0840152610100830191909152610120820152610140016102b7565b34801561079f57600080fd5b506006546102e0906001600160a01b031681565b3480156107bf57600080fd5b506102966107ce3660046152d6565b611ff2565b3480156107df57600080fd5b506105de6107ee366004614f01565b6120e7565b3480156107ff57600080fd5b506102ad61271081565b6102ad6108173660046151b0565b612187565b34801561082857600080fd5b5061048e610837366004614ee4565b600e6020526000908152604090205460ff1681565b34801561085857600080fd5b506102ad600a5481565b34801561086e57600080fd5b506001546001600160a01b03166102e0565b34801561088c57600080fd5b506108a061089b36600461530a565b612a63565b60405160029190910b81526020016102b7565b3480156108bf57600080fd5b506102966108ce366004615327565b612a7d565b3480156108df57600080fd5b506105936108ee3660046152d6565b612c15565b3480156108ff57600080fd5b5061029661090e36600461518e565b612d70565b61060b610921366004615395565b612e03565b34801561093257600080fd5b50610296610941366004614ee4565b6130c7565b34801561095257600080fd5b50610296610961366004614ee4565b613138565b61096e613162565b6109778261318a565b6000828152600c60209081526040918290208251610140810184528154815260018201546001600160a01b03908116938201939093526002820154831693810193909352600381015460608401526004810154821660808401526005810154821660a08401526006810154821660c0840152600781015490911660e083015260088101546101008301819052600990910154610120830152600b549003610a545760405162461bcd60e51b815260206004820152600c60248201526b455445524e414c5f4c4f434b60a01b60448201526064015b60405180910390fd5b4281610100015110610a925760405162461bcd60e51b81526020600482015260076024820152661393d50816515560ca1b6044820152606401610a4b565b61012081015115610ab557610ab083836001600160801b038061323e565b505050505b60208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e91610aee91309187916004016153bf565b600060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b50505060808201516001600160a01b03166000908152600d60205260409020610b469150846136d5565b506080810151604080518581526001600160a01b03928316602082015291841682820152517fcf3f38c6e10e7fa2c0a2d09ff592596efa8ea3865dd7aabb9bff9c5189c607a89181900360600190a1506000828152600c602052604081208181556001810180546001600160a01b0319908116909155600282018054821690556003820183905560048201805482169055600582018054821690556006820180548216905560078201805490911690556008810182905560090155610c0b6001600255565b5050565b6000610c1b60046136e8565b905090565b610c286136f2565b600780546001600160a01b039485166001600160a01b031991821617909155600880549385169382169390931790925560098054919093169116179055565b610c6f6136f2565b6001600160a01b0382166000818152600e6020908152604091829020805460ff191685151590811790915591519182527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910160405180910390a25050565b6000806000610cdb613162565b6000858152600c60209081526040918290208251610140810184528154815260018201546001600160a01b039081169382019390935260028201548316938101939093526003810154606084018190526004820154831660808501526005820154831660a08501526006820154831660c0850152600782015490921660e0840152600881015461010084015260090154610120830152853514610da95760405162461bcd60e51b815260206004820152600660248201526513919508125160d21b6044820152606401610a4b565b60008082602001516001600160a01b03166399fbab8884606001516040518263ffffffff1660e01b8152600401610de291815260200190565b61018060405180830381865afa158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e249190615417565b5050505050505050935093505050610e428233308a6020013561371f565b610e528133308a6040013561371f565b610e658284602001518960200135613859565b610e788184602001518960400135613859565b6020808401516040805163219f5d1760e01b81528a356004820152928a013560248401528901356044830152606089013560648301526080890135608483015260a089013560a48301526001600160a01b03169063219f5d179060c4016060604051808303816000875af1158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1891906154f9565b6040518b815292985090965094507f38f5d789b3e0e71e68d20081e98d4b02ae7ecab7482b6634306b2261e90f806f9060200160405180910390a1505050610f606001600255565b9250925092565b600080600080610f75613162565b610f818888888861323e565b92965090945092509050610f956001600255565b945094509450949050565b610fa86136f2565b610fb0613162565b610fbb838383613988565b610fc56001600255565b505050565b610fd2613162565b6000818152600c6020526040902060058101546001600160a01b0316331461100c5760405162461bcd60e51b8152600401610a4b90615530565b60048101546001600160a01b03166000818152600d6020526040902061103290846136d5565b50600482018054336001600160a01b0319918216811790925560058401805490911690556000908152600d6020526040902061106e9084613ab2565b50604080518481526001600160a01b0383166020820152338183015290517ff91adf142bcf2de4e78197d8153f97cc3bf959173f88d7e5091f50d40e1085fe9181900360600190a150506110c26001600255565b50565b6110cd613162565b6110d68261318a565b6001600160a01b038116330361111b5760405162461bcd60e51b815260206004820152600a60248201526929a0a6a29027aba722a960b11b6044820152606401610a4b565b6000828152600c60209081526040918290206005810180546001600160a01b0319166001600160a01b03861690811790915583518681523393810193909352928201929092527f7336363d3c1722824dac3c93d1256b57d394f59da51548af7e779e47c13fff10906060015b60405180910390a150610c0b6001600255565b6111a26136f2565b60005b828110156112745781600e60008686858181106111c4576111c461554f565b90506020020160208101906111d99190614ee4565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558383828181106112135761121361554f565b90506020020160208101906112289190614ee4565b6001600160a01b03167ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d83604051611264911515815260200190565b60405180910390a26001016111a5565b50505050565b6001600160a01b0381166000908152600d6020526040812061129b906136e8565b92915050565b6112a96136f2565b6112b36000613abe565b565b60015433906001600160a01b031681146112ed5760405163118cdaa760e01b81526001600160a01b0382166004820152602401610a4b565b6110c281613abe565b6112fe614b4c565b6003600061130d600485613ad7565b81526020019081526020016000206040518060a001604052908160008201805461133690615565565b80601f016020809104026020016040519081016040528092919081815260200182805461136290615565565b80156113af5780601f10611384576101008083540402835291602001916113af565b820191906000526020600020905b81548152906001019060200180831161139257829003601f168201915b50505091835250506001820154602082015260028201546040820152600382015460608201526004909101546001600160a01b031660809091015292915050565b6113f8614b84565b6001600160a01b0383166000908152600d60205260408120600c919061141e9085613ad7565b815260208082019290925260409081016000208151610140810183528154815260018201546001600160a01b03908116948201949094526002820154841692810192909252600381015460608301526004810154831660808301526005810154831660a08301526006810154831660c0830152600781015490921660e082015260088201546101008201526009909101546101208201529392505050565b6000806114e36114cb87613ae3565b6114d487613ae3565b6114dd87613ae3565b86613f03565b915091505b94509492505050565b6114f96136f2565b611501613162565b6040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015611537573d6000803e3d6000fd5b50610c0b6001600255565b61154a613162565b6115538261318a565b6000828152600c60209081526040918290206006810180546001600160a01b0319166001600160a01b038616908117909155835186815292830152917fda22afd9d1e0640f160cada74dec56452db8535daf46772df2c5f7a3af46485f9101611187565b6115bf613162565b6115c88261318a565b6000828152600c60205260409020600881015482116116125760405162461bcd60e51b8152600401610a4b906020808252600490820152634441544560e01b604082015260600190565b4282116116315760405162461bcd60e51b8152600401610a4b9061559f565b6402540be4008210806116455750600b5482145b6116615760405162461bcd60e51b8152600401610a4b906155c4565b6008810182905560408051848152602081018490527fefaff1b90138281d215452c67f793017f52e456f65c28ac63f5309a89a059b479101611187565b6116a6613162565b6116af8261318a565b6001600160a01b0381166116d55760405162461bcd60e51b8152600401610a4b906155ea565b6000828152600c60209081526040918290206007810180546001600160a01b0319166001600160a01b038616908117909155835186815292830152917ff47f77d5d198f5b58faaca8c7dc86ebe53925091c07487a01ec62159ff16664e9101611187565b6000611743613162565b336000908152600e602052604090205460ff166117a25760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742077686974656c6973746564000000000000006044820152606401610a4b565b60006117b46080840160608501614ee4565b6001600160a01b0316036117c757600080fd5b60006117d960c0840160a08501614ee4565b6001600160a01b0316036117ff5760405162461bcd60e51b8152600401610a4b906155ea565b6402540be4008260c00135108061181b5750600b548260c00135145b6118375760405162461bcd60e51b8152600401610a4b906155c4565b428260c001351161185a5760405162461bcd60e51b8152600401610a4b9061559f565b611862614b4c565b6000611872610100850185615610565b90501115611906576006546001600160a01b03166332c07c9e611899610100860186615610565b336040518463ffffffff1660e01b81526004016118b893929190615682565b6000604051808303816000875af11580156118d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118ff9190810190615731565b9050611953565b61195061191660e0850185615809565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c1592505050565b90505b6060810151156119665761196681613f9e565b6119736020840184614ee4565b6001600160a01b03166342842e0e333086602001356040518463ffffffff1660e01b81526004016119a6939291906153bf565b600060405180830381600087803b1580156119c057600080fd5b505af11580156119d4573d6000803e3d6000fd5b505050506119e0614bd8565b6119ed6020850185614ee4565b60405163133f757160e31b8152602086013560048201526001600160a01b0391909116906399fbab889060240161018060405180830381865afa158015611a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5c9190615417565b505050506001600160801b031660e0890152600290810b60c08901520b60a087015262ffffff1660808601526001600160a01b0390811660608601521660408401525060009050611ab06020860186614ee4565b6001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b11919061584f565b604080840151606085015160808601519251630b4c774160e11b81526001600160a01b039283166004820152908216602482015262ffffff9092166044830152919250600091831690631698ee8290606401602060405180830381865afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba4919061584f565b905060208601803590611bb79088614ee4565b6001600160a01b031663fc6f786560405180608001604052808481526020018a6040016020810190611be99190614ee4565b6001600160a01b031681526001600160801b0360208201819052604091820152516001600160e01b031960e084901b168152611c28919060040161586c565b60408051808303816000875af1158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a91906158af565b5050602085015115611e0c576000611c8e611c8860208a018a614ee4565b83614051565b9050611c9d6020890189614ee4565b6001600160a01b0316630c49ccbe6040518060a001604052808581526020016127108a60200151866001600160801b0316611cd891906158e9565b611ce29190615916565b6001600160801b031681526020016000815260200160008152602001428152506040518263ffffffff1660e01b8152600401611d1e919061592a565b60408051808303816000875af1158015611d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6091906158af565b50611d7090506020890189614ee4565b604080516080810182528481526008546001600160a01b0390811660208301526001600160801b038284018190526060830152915163fc6f786560e01b8152929091169163fc6f786591611dc69160040161586c565b60408051808303816000875af1158015611de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0891906158af565b5050505b611e14614b84565b600a548152611e266020890189614ee4565b6001600160a01b039081166020830152831660408201526060808201839052611e559060808a01908a01614ee4565b6001600160a01b0316608080830191909152611e779060a08a01908a01614ee4565b6001600160a01b031660c080830191909152611e9890890160a08a01614ee4565b6001600160a01b0390811660e0830190815260c0808b013561010085019081526040808b01516101208701908152600a80546000908152600c60209081528482208a518155908a0151600182018054918b166001600160a01b0319928316179055948a0151600282018054918b169187169190911790556060808b015160038301556080808c0151600484018054918d1691891691909117905560a08c0151600584018054918d16918916919091179055978b0151600683018054918c16918816919091179055975160078201805491909a16951694909417909755925160088301555160099091015554611fba939092600d92611f9b91908e01908e01614ee4565b6001600160a01b03168152602081019190915260400160002090613ab2565b50600a8054906000611fcb8361596d565b90915550508051611fdb906140d4565b5195505050505050611fed6001600255565b919050565b611ffa6136f2565b60008160405160200161200d9190615986565b60405160208183030381529060405280519060200120905060405160200161204290661111519055531560ca1b815260070190565b6040516020818303038152906040528051906020012081036120905760405162461bcd60e51b81526020600482015260076024820152661111519055531560ca1b6044820152606401610a4b565b61209b6004826142ad565b6120a457600080fd5b6120af6004826136d5565b506040518181527faea1931d5fe74928dff1db9836d2d9de778b60cb4afc9ec70c9a1f16b58598a59060200160405180910390a15050565b6120ef614b84565b506000908152600c60209081526040918290208251610140810184528154815260018201546001600160a01b03908116938201939093526002820154831693810193909352600381015460608401526004810154821660808401526005810154821660a08401526006810154821660c0840152600781015490911660e083015260088101546101008301526009015461012082015290565b6000612191613162565b60006121a36080840160608501614ee4565b6001600160a01b0316036121b657600080fd5b60006121c860c0840160a08501614ee4565b6001600160a01b0316036121ee5760405162461bcd60e51b8152600401610a4b906155ea565b6402540be4008260c00135108061220a5750600b548260c00135145b6122265760405162461bcd60e51b8152600401610a4b906155c4565b428260c00135116122495760405162461bcd60e51b8152600401610a4b9061559f565b612251614b4c565b6000612261610100850185615610565b905011156122f5576006546001600160a01b03166332c07c9e612288610100860186615610565b336040518463ffffffff1660e01b81526004016122a793929190615682565b6000604051808303816000875af11580156122c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122ee9190810190615731565b9050612308565b61230561191660e0850185615809565b90505b60608101511561231b5761231b81613f9e565b6123286020840184614ee4565b6001600160a01b03166342842e0e333086602001356040518463ffffffff1660e01b815260040161235b939291906153bf565b600060405180830381600087803b15801561237557600080fd5b505af1158015612389573d6000803e3d6000fd5b50505050612395614bd8565b6123a26020850185614ee4565b60405163133f757160e31b8152602086013560048201526001600160a01b0391909116906399fbab889060240161018060405180830381865afa1580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124119190615417565b505050506001600160801b031660e0890152600290810b60c08901520b60a087015262ffffff1660808601526001600160a01b03908116606086015216604084015250600090506124656020860186614ee4565b6001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c6919061584f565b604080840151606085015160808601519251630b4c774160e11b81526001600160a01b039283166004820152908216602482015262ffffff9092166044830152919250600091831690631698ee8290606401602060405180830381865afa158015612535573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612559919061584f565b60808401516040516322afcccb60e01b815262ffffff90911660048201529091506000906125d6906001600160a01b038516906322afcccb90602401602060405180830381865afa1580156125b2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b91906159a2565b905060006125e3826159bf565b60020b8560a0015160020b1415801561260657508160020b8560c0015160020b14155b1561263e5761263761261b60208a018a614ee4565b60208a0135878561263260608e0160408f01614ee4565b6142c5565b9050612706565b50602087018035906126509089614ee4565b6001600160a01b031663fc6f786560405180608001604052808481526020018b60400160208101906126829190614ee4565b6001600160a01b031681526001600160801b0360208201819052604091820152516001600160e01b031960e084901b1681526126c1919060040161586c565b60408051808303816000875af11580156126df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270391906158af565b50505b6020860151156128a0576000612722611c8860208b018b614ee4565b905061273160208a018a614ee4565b6001600160a01b0316630c49ccbe6040518060a001604052808581526020016127108b60200151866001600160801b031661276c91906158e9565b6127769190615916565b6001600160801b031681526020016000815260200160008152602001428152506040518263ffffffff1660e01b81526004016127b2919061592a565b60408051808303816000875af11580156127d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f491906158af565b50612804905060208a018a614ee4565b604080516080810182528481526008546001600160a01b0390811660208301526001600160801b038284018190526060830152915163fc6f786560e01b8152929091169163fc6f78659161285a9160040161586c565b60408051808303816000875af1158015612878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289c91906158af565b5050505b6128a8614b84565b600a5481526128ba60208a018a614ee4565b6001600160a01b0390811660208301528416604082015260608082018390526128e99060808b01908b01614ee4565b6001600160a01b031660808083019190915261290b9060a08b01908b01614ee4565b6001600160a01b031660c08083019190915261292c908a0160a08b01614ee4565b6001600160a01b0390811660e0830190815260c0808c013561010085019081526040808c01516101208701908152600a80546000908152600c60209081528482208a518155908a0151600182018054918b166001600160a01b0319928316179055948a0151600282018054918b169187169190911790556060808b015160038301556080808c0151600484018054918d1691891691909117905560a08c0151600584018054918d16918916919091179055978b0151600683018054918c16918816919091179055975160078201805491909a16951694909417909755925160088301555160099091015554612a2f939092600d92611f9b91908f01908f01614ee4565b50600a8054906000612a408361596d565b90915550508051612a50906140d4565b519650505050505050611fed6001600255565b600081612a7381620d89e86159e1565b61129b9190615a1b565b612a856136f2565b600085604051602001612a989190615986565b60408051601f19818403018152828252805160209182012060a084018352898452838201899052838301889052606084018790526001600160a01b038616608085015260008181526003909252919020825191935082918190612afb9082615a82565b50602082015160018201556040820151600282015560608201516003820155608090910151600491820180546001600160a01b0319166001600160a01b03909216919091179055612b4c90836142ad565b612bb657612b5b600483613ab2565b507f335d96fad821252e8298f51336937e44332b3731a3c3f249b2cdb77652b33e4f8282600001518360200151846040015185606001518660800151604051612ba996959493929190615b40565b60405180910390a1612c0c565b7fdd151e7029525c623e7c09af0f71271bd7642edd1bf2f64d97bc552faba7c86d8282600001518360200151846040015185606001518660800151604051612c0396959493929190615b40565b60405180910390a15b50505050505050565b612c1d614b4c565b600082604051602001612c309190615986565b60408051601f1981840301815291905280516020909101209050612c556004826142ad565b612c8d5760405162461bcd60e51b81526020600482015260096024820152681393d5081193d5539160ba1b6044820152606401610a4b565b60008181526003602052604090819020815160a08101909252805482908290612cb590615565565b80601f0160208091040260200160405190810160405280929190818152602001828054612ce190615565565b8015612d2e5780601f10612d0357610100808354040283529160200191612d2e565b820191906000526020600020905b815481529060010190602001808311612d1157829003601f168201915b50505091835250506001820154602082015260028201546040820152600382015460608201526004909101546001600160a01b03166080909101529392505050565b612d786136f2565b6000828152600c6020526040902060098101548210612dbd5760405162461bcd60e51b81526020600482015260016024820152601360fa1b6044820152606401610a4b565b6009810182905560408051848152602081018490527fa4b63b21571e7c2b944a681b0a39cda220f85f67aaa7aa4d23fcf7d31e2379a391015b60405180910390a1505050565b600080612e0e613162565b612e178461318a565b6000848152600c60209081526040918290208251610140810184528154815260018201546001600160a01b039081169382019390935260028201548316938101939093526003810154606084018190526004820154831660808501526005820154831660a08501526006820154831660c0850152600782015490921660e0840152600881015461010084015260090154610120830152843514612ee55760405162461bcd60e51b815260206004820152600660248201526513919508125160d21b6044820152606401610a4b565b600b5481610100015103612f2a5760405162461bcd60e51b815260206004820152600c60248201526b455445524e414c5f4c4f434b60a01b6044820152606401610a4b565b4281610100015110612f685760405162461bcd60e51b81526020600482015260076024820152661393d50816515560ca1b6044820152606401610a4b565b80602001516001600160a01b0316630c49ccbe856040518263ffffffff1660e01b8152600401612f989190615b87565b60408051808303816000875af1158015612fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fda91906158af565b60208084015160408051608081018252606080880151825233948201949094526001600160801b03818301819052938101939093525163fc6f786560e01b81529396509194506001600160a01b039091169163fc6f78659161303e9160040161586c565b60408051808303816000875af115801561305c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308091906158af565b50506040518581527fffeb250f5933abd95c7c8e2c0317b8041dc9c5a309b73fa772f533ddd085dd3a9060200160405180910390a1506130c06001600255565b9250929050565b6130cf6136f2565b600180546001600160a01b0383166001600160a01b031990911681179091556131006000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6131406136f2565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600280540361318457604051633ee5aeb560e01b815260040160405180910390fd5b60028055565b6000818152600c60209081526040918290208251610140810184528154815260018201546001600160a01b039081169382019390935260028201548316938101939093526003810154606084015260048101548216608084018190526005820154831660a08501526006820154831660c0850152600782015490921660e08401526008810154610100840152600901546101208301523314610c0b5760405162461bcd60e51b8152600401610a4b90615530565b6000848152600c602090815260408083208151610140810183528154815260018201546001600160a01b039081169482019490945260028201548416928101929092526003810154606083015260048101548316608083018190526005820154841660a08401526006820154841660c0840152600780830154851660e085015260088301546101008501526009909201546101208401529054849384938493909233921682149114806132fd575060c08201516001600160a01b031633145b806133055750805b6133215760405162461bcd60e51b8152600401610a4b90615530565b8161012001516000036133e95781602001516001600160a01b031663fc6f78656040518060800160405280856060015181526020018c6001600160a01b031681526020018b6001600160801b031681526020018a6001600160801b03168152506040518263ffffffff1660e01b815260040161339d919061586c565b60408051808303816000875af11580156133bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133df91906158af565b90965094506136c8565b60008083602001516001600160a01b03166399fbab8885606001516040518263ffffffff1660e01b815260040161342291815260200190565b61018060405180830381865afa158015613440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134649190615417565b505050505050505093509350505083602001516001600160a01b031663fc6f7865604051806080016040528087606001518152602001306001600160a01b031681526020018d6001600160801b031681526020018c6001600160801b03168152506040518263ffffffff1660e01b81526004016134e1919061586c565b60408051808303816000875af11580156134ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352391906158af565b50506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561356c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135909190615bd0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156135da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fe9190615bd0565b9050600085613618576009546001600160a01b031661361a565b8d5b9050600086613629578e61362f565b8760e001515b90508315613679576127108861012001518561364b91906158e9565b6136559190615916565b995061366286838c613988565b61366c8a85615be9565b9b5061367986828e613988565b82156136c1576127108861012001518461369391906158e9565b61369d9190615916565b98506136aa85838b613988565b6136b48984615be9565b9a506136c185828d613988565b5050505050505b5050945094509450949050565b60006136e18383614737565b9392505050565b600061129b825490565b6000546001600160a01b031633146112b35760405163118cdaa760e01b8152336004820152602401610a4b565b600080856001600160a01b03166323b872dd868686604051602401613746939291906153bf565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161377f9190615986565b6000604051808303816000865af19150503d80600081146137bc576040519150601f19603f3d011682016040523d82523d6000602084013e6137c1565b606091505b50915091508180156137eb5750805115806137eb5750808060200190518101906137eb9190615bfc565b6138515760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610a4b565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916138b59190615986565b6000604051808303816000865af19150503d80600081146138f2576040519150601f19603f3d011682016040523d82523d6000602084013e6138f7565b606091505b50915091508180156139215750805115806139215750808060200190518101906139219190615bfc565b6139815760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b6064820152608401610a4b565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916139e49190615986565b6000604051808303816000865af19150503d8060008114613a21576040519150601f19603f3d011682016040523d82523d6000602084013e613a26565b606091505b5091509150818015613a50575080511580613a50575080806020019051810190613a509190615bfc565b6139815760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610a4b565b60006136e18383614831565b600180546001600160a01b03191690556110c281614880565b60006136e183836148d0565b60008060008360020b12613afa578260020b613b07565b8260020b613b0790615c19565b9050613b16620d89e7196159bf565b60020b811115613b4c5760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610a4b565b600081600116600003613b6357600160801b613b75565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613bb4576080613baf826ffff97272373d413259a46990580e213a6158e9565b901c90505b6004821615613bde576080613bd9826ffff2e50f5f656932ef12357cf3c7fdcc6158e9565b901c90505b6008821615613c08576080613c03826fffe5caca7e10e4e61c3624eaa0941cd06158e9565b901c90505b6010821615613c32576080613c2d826fffcb9843d60f6159c9db58835c9266446158e9565b901c90505b6020821615613c5c576080613c57826fff973b41fa98c081472e6896dfb254c06158e9565b901c90505b6040821615613c86576080613c81826fff2ea16466c96a3843ec78b326b528616158e9565b901c90505b6080821615613cb0576080613cab826ffe5dee046a99a2a811c461f1969c30536158e9565b901c90505b610100821615613cdb576080613cd6826ffcbe86c7900a88aedcffc83b479aa3a46158e9565b901c90505b610200821615613d06576080613d01826ff987a7253ac413176f2b074cf7815e546158e9565b901c90505b610400821615613d31576080613d2c826ff3392b0822b70005940c7a398e4b70f36158e9565b901c90505b610800821615613d5c576080613d57826fe7159475a2c29b7443b29c7fa6e889d96158e9565b901c90505b611000821615613d87576080613d82826fd097f3bdfd2022b8845ad8f792aa58256158e9565b901c90505b612000821615613db2576080613dad826fa9f746462d870fdf8a65dc1f90e061e56158e9565b901c90505b614000821615613ddd576080613dd8826f70d869a156d2a1b890bb3df62baf32f76158e9565b901c90505b618000821615613e08576080613e03826f31be135f97d08fd981231505542fcfa66158e9565b901c90505b62010000821615613e34576080613e2f826f09aa508b5b7a84e1c677de54f3e99bc96158e9565b901c90505b62020000821615613e5f576080613e5a826e5d6af8dedb81196699c329225ee6046158e9565b901c90505b62040000821615613e89576080613e84826d2216e584f5fa1ea926041bedfe986158e9565b901c90505b62080000821615613eb1576080613eac826b048a170391f7dc42444e8fa26158e9565b901c90505b60008460020b1315613ecc57613ec981600019615916565b90505b613edb64010000000082615c35565b15613ee7576001613eea565b60005b613efb9060ff16602083901c615c49565b949350505050565b600080836001600160a01b0316856001600160a01b03161115613f24579293925b846001600160a01b0316866001600160a01b031611613f4f57613f488585856148fa565b91506114e8565b836001600160a01b0316866001600160a01b03161015613f8857613f748685856148fa565b9150613f8185878561496d565b90506114e8565b613f9385858561496d565b905094509492505050565b60808101516001600160a01b031661402c5780606001513414613fee5760405162461bcd60e51b8152602060048201526008602482015267464c41542046454560c01b6044820152606401610a4b565b60085460608201516040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610c0b573d6000803e3d6000fd5b608081015160085460608301516110c2929133916001600160a01b039091169061371f565b60405163133f757160e31b81526004810182905260009081906001600160a01b038516906399fbab889060240161018060405180830381865afa15801561409c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c09190615417565b50929e9d5050505050505050505050505050565b6000818152600c60209081526040918290208251610140810184528154815260018201546001600160a01b03908116938201939093526002820154831693810193909352600381015460608401526004810154821660808401526005810154821660a08401526006810154821660c0840152600781015490911660e0830152600881015461010083015260090154610120820152614170614bd8565b6020820151606083015160405163133f757160e31b81526001600160a01b03909216916399fbab88916141a99160040190815260200190565b61018060405180830381865afa1580156141c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141eb9190615417565b5050506001600160801b0390911660e0808b0191909152600292830b60c0808c01919091529390920b60a08a01525062ffffff9092166080808901919091526001600160a01b039384166060808a019190915293909416604080890191909152885160208a0151948a0151958a0151928a0151938a01516101008b01516101208c01518c85015194517fc512bfd5f63c4cdb2ec1197d460a83ce63a32f9a3eee2f4a49f6d9c4a2d360809b50612df69a50939896949293919290918c90615c5c565b600081815260018301602052604081205415156136e1565b6040805160a08101825285815260e08501516001600160801b031660208201526000818301819052606082018190524260808301529151630624e65f60e11b81526001600160a01b03881691630c49ccbe91614324919060040161592a565b60408051808303816000875af1158015614342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061436691906158af565b5050604080516080810182528681523060208201526001600160801b038183018190526060820152905163fc6f786560e01b81526001600160a01b0388169163fc6f7865916143b8919060040161586c565b60408051808303816000875af11580156143d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143fa91906158af565b5050600061440887876149b7565b42610140820152306101208201529050614421846159bf565b600290810b606083015284900b608082015280516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561447a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061449e9190615bd0565b60a082015260208101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156144ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145119190615bd0565b60c0820152600060e08201819052610100820152805160a082015161453891908990613859565b61454b8160200151888360c00151613859565b604051634418b22b60e11b81526000906001600160a01b0389169063883164569061457a908590600401615d99565b6080604051808303816000875af1158015614599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145bd9190615e5d565b5050604051630852cd8d60e31b8152600481018a9052919250506001600160a01b038916906342966c6890602401600060405180830381600087803b15801561460557600080fd5b505af1158015614619573d6000803e3d6000fd5b505083516040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015614667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061468b9190615bd0565b60208401516040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156146db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146ff9190615bd0565b90508115614714578351614714908784613988565b80156147295761472984602001518783613988565b509098975050505050505050565b6000818152600183016020526040812054801561482057600061475b600183615be9565b855490915060009061476f90600190615be9565b90508082146147d457600086600001828154811061478f5761478f61554f565b90600052602060002001549050808760000184815481106147b2576147b261554f565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806147e5576147e5615e9c565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061129b565b600091505061129b565b5092915050565b60008181526001830160205260408120546148785750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561129b565b50600061129b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008260000182815481106148e7576148e761554f565b9060005260206000200154905092915050565b6000826001600160a01b0316846001600160a01b0316111561491a579192915b6001600160a01b0384166149636fffffffffffffffffffffffffffffffff60601b606085901b1661494b8787615eb2565b6001600160a01b0316866001600160a01b0316614a62565b613efb9190615916565b6000826001600160a01b0316846001600160a01b0316111561498d579192915b613efb6001600160801b0383166149a48686615eb2565b6001600160a01b0316600160601b614a62565b6149bf614c3c565b6149c7614c3c565b60405163133f757160e31b8152600481018490526001600160a01b038516906399fbab889060240161018060405180830381865afa158015614a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a319190615417565b50505062ffffff90941660408a01525050506001600160a01b03918216602087015250168352509091505092915050565b6000808060001985870985870292508281108382030391505080600003614a9c57838281614a9257614a92615900565b04925050506136e1565b808411614ae35760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606401610a4b565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040518060a001604052806060815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b6001600160a01b03811681146110c257600080fd5b60008060408385031215614cc057600080fd5b823591506020830135614cd281614c98565b809150509250929050565b600080600060608486031215614cf257600080fd5b8335614cfd81614c98565b92506020840135614d0d81614c98565b91506040840135614d1d81614c98565b809150509250925092565b80151581146110c257600080fd5b60008060408385031215614d4957600080fd5b8235614d5481614c98565b91506020830135614cd281614d28565b600080600080600060808688031215614d7c57600080fd5b8535614d8781614c98565b94506020860135614d9781614c98565b93506040860135925060608601356001600160401b03811115614db957600080fd5b8601601f81018813614dca57600080fd5b80356001600160401b03811115614de057600080fd5b886020828401011115614df257600080fd5b959894975092955050506020019190565b60008082840360e0811215614e1757600080fd5b8335925060c0601f1982011215614e2d57600080fd5b506020830190509250929050565b6001600160801b03811681146110c257600080fd5b60008060008060808587031215614e6657600080fd5b843593506020850135614e7881614c98565b92506040850135614e8881614e3b565b91506060850135614e9881614e3b565b939692955090935050565b600080600060608486031215614eb857600080fd5b8335614ec381614c98565b92506020840135614ed381614c98565b929592945050506040919091013590565b600060208284031215614ef657600080fd5b81356136e181614c98565b600060208284031215614f1357600080fd5b5035919050565b600080600060408486031215614f2f57600080fd5b83356001600160401b03811115614f4557600080fd5b8401601f81018613614f5657600080fd5b80356001600160401b03811115614f6c57600080fd5b8660208260051b8401011115614f8157600080fd5b602091820194509250840135614d1d81614d28565b60005b83811015614fb1578181015183820152602001614f99565b50506000910152565b60008151808452614fd2816020860160208601614f96565b601f01601f19169290920160200192915050565b602081526000825160a0602084015261500260c0840182614fba565b905060208401516040840152604084015160608401526060840151608084015260018060a01b0360808501511660a08401528091505092915050565b6000806040838503121561505157600080fd5b823561505c81614c98565b946020939093013593505050565b8151815260208083015161014083019161508e908401826001600160a01b03169052565b5060408301516150a960408401826001600160a01b03169052565b506060830151606083015260808301516150ce60808401826001600160a01b03169052565b5060a08301516150e960a08401826001600160a01b03169052565b5060c083015161510460c08401826001600160a01b03169052565b5060e083015161511f60e08401826001600160a01b03169052565b5061010083015161010083015261012083015161012083015292915050565b8060020b81146110c257600080fd5b6000806000806080858703121561516357600080fd5b843561516e8161513e565b9350602085013561517e8161513e565b92506040850135614e888161513e565b600080604083850312156151a157600080fd5b50508035926020909101359150565b6000602082840312156151c257600080fd5b81356001600160401b038111156151d857600080fd5b820161012081850312156136e157600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715615223576152236151eb565b60405290565b604051601f8201601f191681016001600160401b0381118282101715615251576152516151eb565b604052919050565b60006001600160401b03821115615272576152726151eb565b50601f01601f191660200190565b600082601f83011261529157600080fd5b81356152a461529f82615259565b615229565b8181528460208386010111156152b957600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156152e857600080fd5b81356001600160401b038111156152fe57600080fd5b613efb84828501615280565b60006020828403121561531c57600080fd5b81356136e18161513e565b600080600080600060a0868803121561533f57600080fd5b85356001600160401b0381111561535557600080fd5b61536188828901615280565b955050602086013593506040860135925060608601359150608086013561538781614c98565b809150509295509295909350565b60008082840360c08112156153a957600080fd5b8335925060a0601f1982011215614e2d57600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b8051611fed81614c98565b805162ffffff81168114611fed57600080fd5b8051611fed8161513e565b8051611fed81614e3b565b6000806000806000806000806000806000806101808d8f03121561543a57600080fd5b8c516bffffffffffffffffffffffff8116811461545657600080fd5b9b5061546460208e016153e3565b9a5061547260408e016153e3565b995061548060608e016153e3565b985061548e60808e016153ee565b975061549c60a08e01615401565b96506154aa60c08e01615401565b95506154b860e08e0161540c565b6101008e01516101208f0151919650945092506154d86101408e0161540c565b91506154e76101608e0161540c565b90509295989b509295989b509295989b565b60008060006060848603121561550e57600080fd5b835161551981614e3b565b602085015160409095015190969495509392505050565b60208082526005908201526427aba722a960d91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061557957607f821691505b60208210810361559957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600b908201526a1110551148141054d4d15160aa1b604082015260600190565b6020808252600c908201526b4d494c4c495345434f4e445360a01b604082015260600190565b6020808252600c908201526b21a7a62622a1aa2fa0a2222960a11b604082015260600190565b6000808335601e1984360301811261562757600080fd5b8301803591506001600160401b0382111561564157600080fd5b6020019150600581901b36038213156130c057600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040808252810183905260006060600585901b830181019083018683601e1936839003015b8882101561571757868503605f1901845282358181126156c657600080fd5b8a016020810190356001600160401b038111156156e257600080fd5b8036038213156156f157600080fd5b6156fc878284615659565b965050506020830192506020840193506001820191506156a7565b5050506001600160a01b0385166020850152509050613efb565b60006020828403121561574357600080fd5b81516001600160401b0381111561575957600080fd5b820160a0818503121561576b57600080fd5b615773615201565b81516001600160401b0381111561578957600080fd5b8201601f8101861361579a57600080fd5b80516157a861529f82615259565b8181528760208385010111156157bd57600080fd5b6157ce826020830160208601614f96565b835250506020828101519082015260408083015190820152606080830151908201526157fc608083016153e3565b6080820152949350505050565b6000808335601e1984360301811261582057600080fd5b8301803591506001600160401b0382111561583a57600080fd5b6020019150368190038213156130c057600080fd5b60006020828403121561586157600080fd5b81516136e181614c98565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b600080604083850312156158c257600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761129b5761129b6158d3565b634e487b7160e01b600052601260045260246000fd5b60008261592557615925615900565b500490565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b60006001820161597f5761597f6158d3565b5060010190565b60008251615998818460208701614f96565b9190910192915050565b6000602082840312156159b457600080fd5b81516136e18161513e565b60008160020b627fffff1981036159d8576159d86158d3565b60000392915050565b60008160020b8360020b806159f8576159f8615900565b627fffff19821460001982141615615a1257615a126158d3565b90059392505050565b60008260020b8260020b028060020b915080821461482a5761482a6158d3565b601f821115610fc557806000526020600020601f840160051c81016020851015615a625750805b601f840160051c820191505b818110156139815760008155600101615a6e565b81516001600160401b03811115615a9b57615a9b6151eb565b615aaf81615aa98454615565565b84615a3b565b6020601f821160018114615ae35760008315615acb5750848201515b600019600385901b1c1916600184901b178455613981565b600084815260208120601f198516915b82811015615b135787850151825560209485019460019092019101615af3565b5084821015615b315786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b86815260c060208201526000615b5960c0830188614fba565b604083019690965250606081019390935260808301919091526001600160a01b031660a09091015292915050565b8135815260a081016020830135615b9d81614e3b565b6001600160801b031660208301526040838101359083015260608084013590830152608092830135929091019190915290565b600060208284031215615be257600080fd5b5051919050565b8181038181111561129b5761129b6158d3565b600060208284031215615c0e57600080fd5b81516136e181614d28565b6000600160ff1b8201615c2e57615c2e6158d3565b5060000390565b600082615c4457615c44615900565b500690565b8082018082111561129b5761129b6158d3565b8a81526001600160a01b038a81166020830152604082018a90528881166060830152878116608083015286811660a083015260c0820186905260e08201859052831661010082015281516bffffffffffffffffffffffff166101208201526102a0810160208301516001600160a01b0381166101408401525060408301516001600160a01b0381166101608401525060608301516001600160a01b03811661018084015250608083015162ffffff81166101a08401525060a0830151615d286101c084018260020b9052565b5060c0830151615d3e6101e084018260020b9052565b5060e08301516001600160801b03908116610200840152610100840151610220840152610120840151610240840152610140840151811661026084015261016090930151909216610280909101529998505050505050505050565b81516001600160a01b0316815261016081016020830151615dc560208401826001600160a01b03169052565b506040830151615ddc604084018262ffffff169052565b506060830151615df1606084018260020b9052565b506080830151615e06608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e0830152610100830151610100830152610120830151615e4d6101208401826001600160a01b03169052565b5061014092830151919092015290565b60008060008060808587031215615e7357600080fd5b84516020860151909450615e8681614e3b565b6040860151606090960151949790965092505050565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b03828116828216039081111561129b5761129b6158d356fea264697066735822122044775f6b6326a07da78c34141bd2fc620b382624c141739cecdd864f9734246a64736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106102715760003560e01c80639f185a0b1161014f578063d73792a9116100c1578063e7a7bdfe1161007a578063e7a7bdfe146108b3578063ed1eee68146108d3578063ef248944146108f3578063f11478f814610913578063f2fde38b14610926578063fae2e6481461094657600080fd5b8063d73792a9146107f3578063d7dc872914610809578063d936547e1461081c578063e091dd1a1461084c578063e30c397814610862578063e526dd481461088057600080fd5b8063b707a28811610113578063b707a28814610680578063c8be1b61146106a0578063cf0d5af3146106b3578063d1f55d4514610793578063d5fdb732146107b3578063d68f4dd1146107d357600080fd5b80639f185a0b146105be578063a339df12146105eb578063ab9ae18014610620578063ac4521c614610640578063b2fb30cb1461066057600080fd5b80633af32abf116101e8578063611f6fe6116101ac578063611f6fe614610513578063715018a61461053357806375eb8e691461054857806379ba50971461055e57806383fb69ad146105735780638da5cb5b146105a057600080fd5b80633af32abf1461045557806345908a471461049e578063489c18b0146104be5780635a04fb69146104d3578063611274c5146104f357600080fd5b80630d392cd91161023a5780630d392cd914610338578063150b7a0214610358578063186941551461039d5780631f113fc3146103d5578063260e12b0146103f5578063280f38671461043557600080fd5b8062f714ce14610276578063038975a114610298578063066b58c7146102c057806309564ab0146102f85780630ae300bf14610318575b600080fd5b34801561028257600080fd5b50610296610291366004614cad565b610966565b005b3480156102a457600080fd5b506102ad610c0f565b6040519081526020015b60405180910390f35b3480156102cc57600080fd5b506007546102e0906001600160a01b031681565b6040516001600160a01b0390911681526020016102b7565b34801561030457600080fd5b50610296610313366004614cdd565b610c20565b34801561032457600080fd5b506008546102e0906001600160a01b031681565b34801561034457600080fd5b50610296610353366004614d36565b610c67565b34801561036457600080fd5b50610384610373366004614d64565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016102b7565b6103b06103ab366004614e03565b610cce565b604080516001600160801b0390941684526020840192909252908201526060016102b7565b3480156103e157600080fd5b506009546102e0906001600160a01b031681565b34801561040157600080fd5b50610415610410366004614e50565b610f67565b6040805194855260208501939093529183015260608201526080016102b7565b34801561044157600080fd5b50610296610450366004614ea3565b610fa0565b34801561046157600080fd5b5061048e610470366004614ee4565b6001600160a01b03166000908152600e602052604090205460ff1690565b60405190151581526020016102b7565b3480156104aa57600080fd5b506102966104b9366004614f01565b610fca565b3480156104ca57600080fd5b50600a546102ad565b3480156104df57600080fd5b506102966104ee366004614cad565b6110c5565b3480156104ff57600080fd5b5061029661050e366004614f1a565b61119a565b34801561051f57600080fd5b506102ad61052e366004614ee4565b61127a565b34801561053f57600080fd5b506102966112a1565b34801561055457600080fd5b506102ad600b5481565b34801561056a57600080fd5b506102966112b5565b34801561057f57600080fd5b5061059361058e366004614f01565b6112f6565b6040516102b79190614fe6565b3480156105ac57600080fd5b506000546001600160a01b03166102e0565b3480156105ca57600080fd5b506105de6105d936600461503e565b6113f0565b6040516102b7919061506a565b3480156105f757600080fd5b5061060b61060636600461514d565b6114bc565b604080519283526020830191909152016102b7565b34801561062c57600080fd5b5061029661063b366004614cad565b6114f1565b34801561064c57600080fd5b5061029661065b366004614cad565b611542565b34801561066c57600080fd5b5061029661067b36600461518e565b6115b7565b34801561068c57600080fd5b5061029661069b366004614cad565b61169e565b6102ad6106ae3660046151b0565b611739565b3480156106bf57600080fd5b506107336106ce366004614f01565b600c60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460099099015497986001600160a01b0397881698968816979596948616959384169492841693909116918a565b604080519a8b526001600160a01b03998a1660208c0152978916978a01979097526060890195909552928616608088015290851660a0870152841660c086015290921660e0840152610100830191909152610120820152610140016102b7565b34801561079f57600080fd5b506006546102e0906001600160a01b031681565b3480156107bf57600080fd5b506102966107ce3660046152d6565b611ff2565b3480156107df57600080fd5b506105de6107ee366004614f01565b6120e7565b3480156107ff57600080fd5b506102ad61271081565b6102ad6108173660046151b0565b612187565b34801561082857600080fd5b5061048e610837366004614ee4565b600e6020526000908152604090205460ff1681565b34801561085857600080fd5b506102ad600a5481565b34801561086e57600080fd5b506001546001600160a01b03166102e0565b34801561088c57600080fd5b506108a061089b36600461530a565b612a63565b60405160029190910b81526020016102b7565b3480156108bf57600080fd5b506102966108ce366004615327565b612a7d565b3480156108df57600080fd5b506105936108ee3660046152d6565b612c15565b3480156108ff57600080fd5b5061029661090e36600461518e565b612d70565b61060b610921366004615395565b612e03565b34801561093257600080fd5b50610296610941366004614ee4565b6130c7565b34801561095257600080fd5b50610296610961366004614ee4565b613138565b61096e613162565b6109778261318a565b6000828152600c60209081526040918290208251610140810184528154815260018201546001600160a01b03908116938201939093526002820154831693810193909352600381015460608401526004810154821660808401526005810154821660a08401526006810154821660c0840152600781015490911660e083015260088101546101008301819052600990910154610120830152600b549003610a545760405162461bcd60e51b815260206004820152600c60248201526b455445524e414c5f4c4f434b60a01b60448201526064015b60405180910390fd5b4281610100015110610a925760405162461bcd60e51b81526020600482015260076024820152661393d50816515560ca1b6044820152606401610a4b565b61012081015115610ab557610ab083836001600160801b038061323e565b505050505b60208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e91610aee91309187916004016153bf565b600060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b50505060808201516001600160a01b03166000908152600d60205260409020610b469150846136d5565b506080810151604080518581526001600160a01b03928316602082015291841682820152517fcf3f38c6e10e7fa2c0a2d09ff592596efa8ea3865dd7aabb9bff9c5189c607a89181900360600190a1506000828152600c602052604081208181556001810180546001600160a01b0319908116909155600282018054821690556003820183905560048201805482169055600582018054821690556006820180548216905560078201805490911690556008810182905560090155610c0b6001600255565b5050565b6000610c1b60046136e8565b905090565b610c286136f2565b600780546001600160a01b039485166001600160a01b031991821617909155600880549385169382169390931790925560098054919093169116179055565b610c6f6136f2565b6001600160a01b0382166000818152600e6020908152604091829020805460ff191685151590811790915591519182527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910160405180910390a25050565b6000806000610cdb613162565b6000858152600c60209081526040918290208251610140810184528154815260018201546001600160a01b039081169382019390935260028201548316938101939093526003810154606084018190526004820154831660808501526005820154831660a08501526006820154831660c0850152600782015490921660e0840152600881015461010084015260090154610120830152853514610da95760405162461bcd60e51b815260206004820152600660248201526513919508125160d21b6044820152606401610a4b565b60008082602001516001600160a01b03166399fbab8884606001516040518263ffffffff1660e01b8152600401610de291815260200190565b61018060405180830381865afa158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e249190615417565b5050505050505050935093505050610e428233308a6020013561371f565b610e528133308a6040013561371f565b610e658284602001518960200135613859565b610e788184602001518960400135613859565b6020808401516040805163219f5d1760e01b81528a356004820152928a013560248401528901356044830152606089013560648301526080890135608483015260a089013560a48301526001600160a01b03169063219f5d179060c4016060604051808303816000875af1158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1891906154f9565b6040518b815292985090965094507f38f5d789b3e0e71e68d20081e98d4b02ae7ecab7482b6634306b2261e90f806f9060200160405180910390a1505050610f606001600255565b9250925092565b600080600080610f75613162565b610f818888888861323e565b92965090945092509050610f956001600255565b945094509450949050565b610fa86136f2565b610fb0613162565b610fbb838383613988565b610fc56001600255565b505050565b610fd2613162565b6000818152600c6020526040902060058101546001600160a01b0316331461100c5760405162461bcd60e51b8152600401610a4b90615530565b60048101546001600160a01b03166000818152600d6020526040902061103290846136d5565b50600482018054336001600160a01b0319918216811790925560058401805490911690556000908152600d6020526040902061106e9084613ab2565b50604080518481526001600160a01b0383166020820152338183015290517ff91adf142bcf2de4e78197d8153f97cc3bf959173f88d7e5091f50d40e1085fe9181900360600190a150506110c26001600255565b50565b6110cd613162565b6110d68261318a565b6001600160a01b038116330361111b5760405162461bcd60e51b815260206004820152600a60248201526929a0a6a29027aba722a960b11b6044820152606401610a4b565b6000828152600c60209081526040918290206005810180546001600160a01b0319166001600160a01b03861690811790915583518681523393810193909352928201929092527f7336363d3c1722824dac3c93d1256b57d394f59da51548af7e779e47c13fff10906060015b60405180910390a150610c0b6001600255565b6111a26136f2565b60005b828110156112745781600e60008686858181106111c4576111c461554f565b90506020020160208101906111d99190614ee4565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558383828181106112135761121361554f565b90506020020160208101906112289190614ee4565b6001600160a01b03167ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d83604051611264911515815260200190565b60405180910390a26001016111a5565b50505050565b6001600160a01b0381166000908152600d6020526040812061129b906136e8565b92915050565b6112a96136f2565b6112b36000613abe565b565b60015433906001600160a01b031681146112ed5760405163118cdaa760e01b81526001600160a01b0382166004820152602401610a4b565b6110c281613abe565b6112fe614b4c565b6003600061130d600485613ad7565b81526020019081526020016000206040518060a001604052908160008201805461133690615565565b80601f016020809104026020016040519081016040528092919081815260200182805461136290615565565b80156113af5780601f10611384576101008083540402835291602001916113af565b820191906000526020600020905b81548152906001019060200180831161139257829003601f168201915b50505091835250506001820154602082015260028201546040820152600382015460608201526004909101546001600160a01b031660809091015292915050565b6113f8614b84565b6001600160a01b0383166000908152600d60205260408120600c919061141e9085613ad7565b815260208082019290925260409081016000208151610140810183528154815260018201546001600160a01b03908116948201949094526002820154841692810192909252600381015460608301526004810154831660808301526005810154831660a08301526006810154831660c0830152600781015490921660e082015260088201546101008201526009909101546101208201529392505050565b6000806114e36114cb87613ae3565b6114d487613ae3565b6114dd87613ae3565b86613f03565b915091505b94509492505050565b6114f96136f2565b611501613162565b6040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015611537573d6000803e3d6000fd5b50610c0b6001600255565b61154a613162565b6115538261318a565b6000828152600c60209081526040918290206006810180546001600160a01b0319166001600160a01b038616908117909155835186815292830152917fda22afd9d1e0640f160cada74dec56452db8535daf46772df2c5f7a3af46485f9101611187565b6115bf613162565b6115c88261318a565b6000828152600c60205260409020600881015482116116125760405162461bcd60e51b8152600401610a4b906020808252600490820152634441544560e01b604082015260600190565b4282116116315760405162461bcd60e51b8152600401610a4b9061559f565b6402540be4008210806116455750600b5482145b6116615760405162461bcd60e51b8152600401610a4b906155c4565b6008810182905560408051848152602081018490527fefaff1b90138281d215452c67f793017f52e456f65c28ac63f5309a89a059b479101611187565b6116a6613162565b6116af8261318a565b6001600160a01b0381166116d55760405162461bcd60e51b8152600401610a4b906155ea565b6000828152600c60209081526040918290206007810180546001600160a01b0319166001600160a01b038616908117909155835186815292830152917ff47f77d5d198f5b58faaca8c7dc86ebe53925091c07487a01ec62159ff16664e9101611187565b6000611743613162565b336000908152600e602052604090205460ff166117a25760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742077686974656c6973746564000000000000006044820152606401610a4b565b60006117b46080840160608501614ee4565b6001600160a01b0316036117c757600080fd5b60006117d960c0840160a08501614ee4565b6001600160a01b0316036117ff5760405162461bcd60e51b8152600401610a4b906155ea565b6402540be4008260c00135108061181b5750600b548260c00135145b6118375760405162461bcd60e51b8152600401610a4b906155c4565b428260c001351161185a5760405162461bcd60e51b8152600401610a4b9061559f565b611862614b4c565b6000611872610100850185615610565b90501115611906576006546001600160a01b03166332c07c9e611899610100860186615610565b336040518463ffffffff1660e01b81526004016118b893929190615682565b6000604051808303816000875af11580156118d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118ff9190810190615731565b9050611953565b61195061191660e0850185615809565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c1592505050565b90505b6060810151156119665761196681613f9e565b6119736020840184614ee4565b6001600160a01b03166342842e0e333086602001356040518463ffffffff1660e01b81526004016119a6939291906153bf565b600060405180830381600087803b1580156119c057600080fd5b505af11580156119d4573d6000803e3d6000fd5b505050506119e0614bd8565b6119ed6020850185614ee4565b60405163133f757160e31b8152602086013560048201526001600160a01b0391909116906399fbab889060240161018060405180830381865afa158015611a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5c9190615417565b505050506001600160801b031660e0890152600290810b60c08901520b60a087015262ffffff1660808601526001600160a01b0390811660608601521660408401525060009050611ab06020860186614ee4565b6001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b11919061584f565b604080840151606085015160808601519251630b4c774160e11b81526001600160a01b039283166004820152908216602482015262ffffff9092166044830152919250600091831690631698ee8290606401602060405180830381865afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba4919061584f565b905060208601803590611bb79088614ee4565b6001600160a01b031663fc6f786560405180608001604052808481526020018a6040016020810190611be99190614ee4565b6001600160a01b031681526001600160801b0360208201819052604091820152516001600160e01b031960e084901b168152611c28919060040161586c565b60408051808303816000875af1158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a91906158af565b5050602085015115611e0c576000611c8e611c8860208a018a614ee4565b83614051565b9050611c9d6020890189614ee4565b6001600160a01b0316630c49ccbe6040518060a001604052808581526020016127108a60200151866001600160801b0316611cd891906158e9565b611ce29190615916565b6001600160801b031681526020016000815260200160008152602001428152506040518263ffffffff1660e01b8152600401611d1e919061592a565b60408051808303816000875af1158015611d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6091906158af565b50611d7090506020890189614ee4565b604080516080810182528481526008546001600160a01b0390811660208301526001600160801b038284018190526060830152915163fc6f786560e01b8152929091169163fc6f786591611dc69160040161586c565b60408051808303816000875af1158015611de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0891906158af565b5050505b611e14614b84565b600a548152611e266020890189614ee4565b6001600160a01b039081166020830152831660408201526060808201839052611e559060808a01908a01614ee4565b6001600160a01b0316608080830191909152611e779060a08a01908a01614ee4565b6001600160a01b031660c080830191909152611e9890890160a08a01614ee4565b6001600160a01b0390811660e0830190815260c0808b013561010085019081526040808b01516101208701908152600a80546000908152600c60209081528482208a518155908a0151600182018054918b166001600160a01b0319928316179055948a0151600282018054918b169187169190911790556060808b015160038301556080808c0151600484018054918d1691891691909117905560a08c0151600584018054918d16918916919091179055978b0151600683018054918c16918816919091179055975160078201805491909a16951694909417909755925160088301555160099091015554611fba939092600d92611f9b91908e01908e01614ee4565b6001600160a01b03168152602081019190915260400160002090613ab2565b50600a8054906000611fcb8361596d565b90915550508051611fdb906140d4565b5195505050505050611fed6001600255565b919050565b611ffa6136f2565b60008160405160200161200d9190615986565b60405160208183030381529060405280519060200120905060405160200161204290661111519055531560ca1b815260070190565b6040516020818303038152906040528051906020012081036120905760405162461bcd60e51b81526020600482015260076024820152661111519055531560ca1b6044820152606401610a4b565b61209b6004826142ad565b6120a457600080fd5b6120af6004826136d5565b506040518181527faea1931d5fe74928dff1db9836d2d9de778b60cb4afc9ec70c9a1f16b58598a59060200160405180910390a15050565b6120ef614b84565b506000908152600c60209081526040918290208251610140810184528154815260018201546001600160a01b03908116938201939093526002820154831693810193909352600381015460608401526004810154821660808401526005810154821660a08401526006810154821660c0840152600781015490911660e083015260088101546101008301526009015461012082015290565b6000612191613162565b60006121a36080840160608501614ee4565b6001600160a01b0316036121b657600080fd5b60006121c860c0840160a08501614ee4565b6001600160a01b0316036121ee5760405162461bcd60e51b8152600401610a4b906155ea565b6402540be4008260c00135108061220a5750600b548260c00135145b6122265760405162461bcd60e51b8152600401610a4b906155c4565b428260c00135116122495760405162461bcd60e51b8152600401610a4b9061559f565b612251614b4c565b6000612261610100850185615610565b905011156122f5576006546001600160a01b03166332c07c9e612288610100860186615610565b336040518463ffffffff1660e01b81526004016122a793929190615682565b6000604051808303816000875af11580156122c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122ee9190810190615731565b9050612308565b61230561191660e0850185615809565b90505b60608101511561231b5761231b81613f9e565b6123286020840184614ee4565b6001600160a01b03166342842e0e333086602001356040518463ffffffff1660e01b815260040161235b939291906153bf565b600060405180830381600087803b15801561237557600080fd5b505af1158015612389573d6000803e3d6000fd5b50505050612395614bd8565b6123a26020850185614ee4565b60405163133f757160e31b8152602086013560048201526001600160a01b0391909116906399fbab889060240161018060405180830381865afa1580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124119190615417565b505050506001600160801b031660e0890152600290810b60c08901520b60a087015262ffffff1660808601526001600160a01b03908116606086015216604084015250600090506124656020860186614ee4565b6001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c6919061584f565b604080840151606085015160808601519251630b4c774160e11b81526001600160a01b039283166004820152908216602482015262ffffff9092166044830152919250600091831690631698ee8290606401602060405180830381865afa158015612535573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612559919061584f565b60808401516040516322afcccb60e01b815262ffffff90911660048201529091506000906125d6906001600160a01b038516906322afcccb90602401602060405180830381865afa1580156125b2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b91906159a2565b905060006125e3826159bf565b60020b8560a0015160020b1415801561260657508160020b8560c0015160020b14155b1561263e5761263761261b60208a018a614ee4565b60208a0135878561263260608e0160408f01614ee4565b6142c5565b9050612706565b50602087018035906126509089614ee4565b6001600160a01b031663fc6f786560405180608001604052808481526020018b60400160208101906126829190614ee4565b6001600160a01b031681526001600160801b0360208201819052604091820152516001600160e01b031960e084901b1681526126c1919060040161586c565b60408051808303816000875af11580156126df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270391906158af565b50505b6020860151156128a0576000612722611c8860208b018b614ee4565b905061273160208a018a614ee4565b6001600160a01b0316630c49ccbe6040518060a001604052808581526020016127108b60200151866001600160801b031661276c91906158e9565b6127769190615916565b6001600160801b031681526020016000815260200160008152602001428152506040518263ffffffff1660e01b81526004016127b2919061592a565b60408051808303816000875af11580156127d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f491906158af565b50612804905060208a018a614ee4565b604080516080810182528481526008546001600160a01b0390811660208301526001600160801b038284018190526060830152915163fc6f786560e01b8152929091169163fc6f78659161285a9160040161586c565b60408051808303816000875af1158015612878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289c91906158af565b5050505b6128a8614b84565b600a5481526128ba60208a018a614ee4565b6001600160a01b0390811660208301528416604082015260608082018390526128e99060808b01908b01614ee4565b6001600160a01b031660808083019190915261290b9060a08b01908b01614ee4565b6001600160a01b031660c08083019190915261292c908a0160a08b01614ee4565b6001600160a01b0390811660e0830190815260c0808c013561010085019081526040808c01516101208701908152600a80546000908152600c60209081528482208a518155908a0151600182018054918b166001600160a01b0319928316179055948a0151600282018054918b169187169190911790556060808b015160038301556080808c0151600484018054918d1691891691909117905560a08c0151600584018054918d16918916919091179055978b0151600683018054918c16918816919091179055975160078201805491909a16951694909417909755925160088301555160099091015554612a2f939092600d92611f9b91908f01908f01614ee4565b50600a8054906000612a408361596d565b90915550508051612a50906140d4565b519650505050505050611fed6001600255565b600081612a7381620d89e86159e1565b61129b9190615a1b565b612a856136f2565b600085604051602001612a989190615986565b60408051601f19818403018152828252805160209182012060a084018352898452838201899052838301889052606084018790526001600160a01b038616608085015260008181526003909252919020825191935082918190612afb9082615a82565b50602082015160018201556040820151600282015560608201516003820155608090910151600491820180546001600160a01b0319166001600160a01b03909216919091179055612b4c90836142ad565b612bb657612b5b600483613ab2565b507f335d96fad821252e8298f51336937e44332b3731a3c3f249b2cdb77652b33e4f8282600001518360200151846040015185606001518660800151604051612ba996959493929190615b40565b60405180910390a1612c0c565b7fdd151e7029525c623e7c09af0f71271bd7642edd1bf2f64d97bc552faba7c86d8282600001518360200151846040015185606001518660800151604051612c0396959493929190615b40565b60405180910390a15b50505050505050565b612c1d614b4c565b600082604051602001612c309190615986565b60408051601f1981840301815291905280516020909101209050612c556004826142ad565b612c8d5760405162461bcd60e51b81526020600482015260096024820152681393d5081193d5539160ba1b6044820152606401610a4b565b60008181526003602052604090819020815160a08101909252805482908290612cb590615565565b80601f0160208091040260200160405190810160405280929190818152602001828054612ce190615565565b8015612d2e5780601f10612d0357610100808354040283529160200191612d2e565b820191906000526020600020905b815481529060010190602001808311612d1157829003601f168201915b50505091835250506001820154602082015260028201546040820152600382015460608201526004909101546001600160a01b03166080909101529392505050565b612d786136f2565b6000828152600c6020526040902060098101548210612dbd5760405162461bcd60e51b81526020600482015260016024820152601360fa1b6044820152606401610a4b565b6009810182905560408051848152602081018490527fa4b63b21571e7c2b944a681b0a39cda220f85f67aaa7aa4d23fcf7d31e2379a391015b60405180910390a1505050565b600080612e0e613162565b612e178461318a565b6000848152600c60209081526040918290208251610140810184528154815260018201546001600160a01b039081169382019390935260028201548316938101939093526003810154606084018190526004820154831660808501526005820154831660a08501526006820154831660c0850152600782015490921660e0840152600881015461010084015260090154610120830152843514612ee55760405162461bcd60e51b815260206004820152600660248201526513919508125160d21b6044820152606401610a4b565b600b5481610100015103612f2a5760405162461bcd60e51b815260206004820152600c60248201526b455445524e414c5f4c4f434b60a01b6044820152606401610a4b565b4281610100015110612f685760405162461bcd60e51b81526020600482015260076024820152661393d50816515560ca1b6044820152606401610a4b565b80602001516001600160a01b0316630c49ccbe856040518263ffffffff1660e01b8152600401612f989190615b87565b60408051808303816000875af1158015612fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fda91906158af565b60208084015160408051608081018252606080880151825233948201949094526001600160801b03818301819052938101939093525163fc6f786560e01b81529396509194506001600160a01b039091169163fc6f78659161303e9160040161586c565b60408051808303816000875af115801561305c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308091906158af565b50506040518581527fffeb250f5933abd95c7c8e2c0317b8041dc9c5a309b73fa772f533ddd085dd3a9060200160405180910390a1506130c06001600255565b9250929050565b6130cf6136f2565b600180546001600160a01b0383166001600160a01b031990911681179091556131006000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6131406136f2565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600280540361318457604051633ee5aeb560e01b815260040160405180910390fd5b60028055565b6000818152600c60209081526040918290208251610140810184528154815260018201546001600160a01b039081169382019390935260028201548316938101939093526003810154606084015260048101548216608084018190526005820154831660a08501526006820154831660c0850152600782015490921660e08401526008810154610100840152600901546101208301523314610c0b5760405162461bcd60e51b8152600401610a4b90615530565b6000848152600c602090815260408083208151610140810183528154815260018201546001600160a01b039081169482019490945260028201548416928101929092526003810154606083015260048101548316608083018190526005820154841660a08401526006820154841660c0840152600780830154851660e085015260088301546101008501526009909201546101208401529054849384938493909233921682149114806132fd575060c08201516001600160a01b031633145b806133055750805b6133215760405162461bcd60e51b8152600401610a4b90615530565b8161012001516000036133e95781602001516001600160a01b031663fc6f78656040518060800160405280856060015181526020018c6001600160a01b031681526020018b6001600160801b031681526020018a6001600160801b03168152506040518263ffffffff1660e01b815260040161339d919061586c565b60408051808303816000875af11580156133bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133df91906158af565b90965094506136c8565b60008083602001516001600160a01b03166399fbab8885606001516040518263ffffffff1660e01b815260040161342291815260200190565b61018060405180830381865afa158015613440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134649190615417565b505050505050505093509350505083602001516001600160a01b031663fc6f7865604051806080016040528087606001518152602001306001600160a01b031681526020018d6001600160801b031681526020018c6001600160801b03168152506040518263ffffffff1660e01b81526004016134e1919061586c565b60408051808303816000875af11580156134ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352391906158af565b50506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561356c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135909190615bd0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156135da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fe9190615bd0565b9050600085613618576009546001600160a01b031661361a565b8d5b9050600086613629578e61362f565b8760e001515b90508315613679576127108861012001518561364b91906158e9565b6136559190615916565b995061366286838c613988565b61366c8a85615be9565b9b5061367986828e613988565b82156136c1576127108861012001518461369391906158e9565b61369d9190615916565b98506136aa85838b613988565b6136b48984615be9565b9a506136c185828d613988565b5050505050505b5050945094509450949050565b60006136e18383614737565b9392505050565b600061129b825490565b6000546001600160a01b031633146112b35760405163118cdaa760e01b8152336004820152602401610a4b565b600080856001600160a01b03166323b872dd868686604051602401613746939291906153bf565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161377f9190615986565b6000604051808303816000865af19150503d80600081146137bc576040519150601f19603f3d011682016040523d82523d6000602084013e6137c1565b606091505b50915091508180156137eb5750805115806137eb5750808060200190518101906137eb9190615bfc565b6138515760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610a4b565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916138b59190615986565b6000604051808303816000865af19150503d80600081146138f2576040519150601f19603f3d011682016040523d82523d6000602084013e6138f7565b606091505b50915091508180156139215750805115806139215750808060200190518101906139219190615bfc565b6139815760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b6064820152608401610a4b565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916139e49190615986565b6000604051808303816000865af19150503d8060008114613a21576040519150601f19603f3d011682016040523d82523d6000602084013e613a26565b606091505b5091509150818015613a50575080511580613a50575080806020019051810190613a509190615bfc565b6139815760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610a4b565b60006136e18383614831565b600180546001600160a01b03191690556110c281614880565b60006136e183836148d0565b60008060008360020b12613afa578260020b613b07565b8260020b613b0790615c19565b9050613b16620d89e7196159bf565b60020b811115613b4c5760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610a4b565b600081600116600003613b6357600160801b613b75565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613bb4576080613baf826ffff97272373d413259a46990580e213a6158e9565b901c90505b6004821615613bde576080613bd9826ffff2e50f5f656932ef12357cf3c7fdcc6158e9565b901c90505b6008821615613c08576080613c03826fffe5caca7e10e4e61c3624eaa0941cd06158e9565b901c90505b6010821615613c32576080613c2d826fffcb9843d60f6159c9db58835c9266446158e9565b901c90505b6020821615613c5c576080613c57826fff973b41fa98c081472e6896dfb254c06158e9565b901c90505b6040821615613c86576080613c81826fff2ea16466c96a3843ec78b326b528616158e9565b901c90505b6080821615613cb0576080613cab826ffe5dee046a99a2a811c461f1969c30536158e9565b901c90505b610100821615613cdb576080613cd6826ffcbe86c7900a88aedcffc83b479aa3a46158e9565b901c90505b610200821615613d06576080613d01826ff987a7253ac413176f2b074cf7815e546158e9565b901c90505b610400821615613d31576080613d2c826ff3392b0822b70005940c7a398e4b70f36158e9565b901c90505b610800821615613d5c576080613d57826fe7159475a2c29b7443b29c7fa6e889d96158e9565b901c90505b611000821615613d87576080613d82826fd097f3bdfd2022b8845ad8f792aa58256158e9565b901c90505b612000821615613db2576080613dad826fa9f746462d870fdf8a65dc1f90e061e56158e9565b901c90505b614000821615613ddd576080613dd8826f70d869a156d2a1b890bb3df62baf32f76158e9565b901c90505b618000821615613e08576080613e03826f31be135f97d08fd981231505542fcfa66158e9565b901c90505b62010000821615613e34576080613e2f826f09aa508b5b7a84e1c677de54f3e99bc96158e9565b901c90505b62020000821615613e5f576080613e5a826e5d6af8dedb81196699c329225ee6046158e9565b901c90505b62040000821615613e89576080613e84826d2216e584f5fa1ea926041bedfe986158e9565b901c90505b62080000821615613eb1576080613eac826b048a170391f7dc42444e8fa26158e9565b901c90505b60008460020b1315613ecc57613ec981600019615916565b90505b613edb64010000000082615c35565b15613ee7576001613eea565b60005b613efb9060ff16602083901c615c49565b949350505050565b600080836001600160a01b0316856001600160a01b03161115613f24579293925b846001600160a01b0316866001600160a01b031611613f4f57613f488585856148fa565b91506114e8565b836001600160a01b0316866001600160a01b03161015613f8857613f748685856148fa565b9150613f8185878561496d565b90506114e8565b613f9385858561496d565b905094509492505050565b60808101516001600160a01b031661402c5780606001513414613fee5760405162461bcd60e51b8152602060048201526008602482015267464c41542046454560c01b6044820152606401610a4b565b60085460608201516040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610c0b573d6000803e3d6000fd5b608081015160085460608301516110c2929133916001600160a01b039091169061371f565b60405163133f757160e31b81526004810182905260009081906001600160a01b038516906399fbab889060240161018060405180830381865afa15801561409c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c09190615417565b50929e9d5050505050505050505050505050565b6000818152600c60209081526040918290208251610140810184528154815260018201546001600160a01b03908116938201939093526002820154831693810193909352600381015460608401526004810154821660808401526005810154821660a08401526006810154821660c0840152600781015490911660e0830152600881015461010083015260090154610120820152614170614bd8565b6020820151606083015160405163133f757160e31b81526001600160a01b03909216916399fbab88916141a99160040190815260200190565b61018060405180830381865afa1580156141c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141eb9190615417565b5050506001600160801b0390911660e0808b0191909152600292830b60c0808c01919091529390920b60a08a01525062ffffff9092166080808901919091526001600160a01b039384166060808a019190915293909416604080890191909152885160208a0151948a0151958a0151928a0151938a01516101008b01516101208c01518c85015194517fc512bfd5f63c4cdb2ec1197d460a83ce63a32f9a3eee2f4a49f6d9c4a2d360809b50612df69a50939896949293919290918c90615c5c565b600081815260018301602052604081205415156136e1565b6040805160a08101825285815260e08501516001600160801b031660208201526000818301819052606082018190524260808301529151630624e65f60e11b81526001600160a01b03881691630c49ccbe91614324919060040161592a565b60408051808303816000875af1158015614342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061436691906158af565b5050604080516080810182528681523060208201526001600160801b038183018190526060820152905163fc6f786560e01b81526001600160a01b0388169163fc6f7865916143b8919060040161586c565b60408051808303816000875af11580156143d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143fa91906158af565b5050600061440887876149b7565b42610140820152306101208201529050614421846159bf565b600290810b606083015284900b608082015280516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561447a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061449e9190615bd0565b60a082015260208101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156144ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145119190615bd0565b60c0820152600060e08201819052610100820152805160a082015161453891908990613859565b61454b8160200151888360c00151613859565b604051634418b22b60e11b81526000906001600160a01b0389169063883164569061457a908590600401615d99565b6080604051808303816000875af1158015614599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145bd9190615e5d565b5050604051630852cd8d60e31b8152600481018a9052919250506001600160a01b038916906342966c6890602401600060405180830381600087803b15801561460557600080fd5b505af1158015614619573d6000803e3d6000fd5b505083516040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015614667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061468b9190615bd0565b60208401516040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156146db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146ff9190615bd0565b90508115614714578351614714908784613988565b80156147295761472984602001518783613988565b509098975050505050505050565b6000818152600183016020526040812054801561482057600061475b600183615be9565b855490915060009061476f90600190615be9565b90508082146147d457600086600001828154811061478f5761478f61554f565b90600052602060002001549050808760000184815481106147b2576147b261554f565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806147e5576147e5615e9c565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061129b565b600091505061129b565b5092915050565b60008181526001830160205260408120546148785750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561129b565b50600061129b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008260000182815481106148e7576148e761554f565b9060005260206000200154905092915050565b6000826001600160a01b0316846001600160a01b0316111561491a579192915b6001600160a01b0384166149636fffffffffffffffffffffffffffffffff60601b606085901b1661494b8787615eb2565b6001600160a01b0316866001600160a01b0316614a62565b613efb9190615916565b6000826001600160a01b0316846001600160a01b0316111561498d579192915b613efb6001600160801b0383166149a48686615eb2565b6001600160a01b0316600160601b614a62565b6149bf614c3c565b6149c7614c3c565b60405163133f757160e31b8152600481018490526001600160a01b038516906399fbab889060240161018060405180830381865afa158015614a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a319190615417565b50505062ffffff90941660408a01525050506001600160a01b03918216602087015250168352509091505092915050565b6000808060001985870985870292508281108382030391505080600003614a9c57838281614a9257614a92615900565b04925050506136e1565b808411614ae35760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606401610a4b565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040518060a001604052806060815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b6001600160a01b03811681146110c257600080fd5b60008060408385031215614cc057600080fd5b823591506020830135614cd281614c98565b809150509250929050565b600080600060608486031215614cf257600080fd5b8335614cfd81614c98565b92506020840135614d0d81614c98565b91506040840135614d1d81614c98565b809150509250925092565b80151581146110c257600080fd5b60008060408385031215614d4957600080fd5b8235614d5481614c98565b91506020830135614cd281614d28565b600080600080600060808688031215614d7c57600080fd5b8535614d8781614c98565b94506020860135614d9781614c98565b93506040860135925060608601356001600160401b03811115614db957600080fd5b8601601f81018813614dca57600080fd5b80356001600160401b03811115614de057600080fd5b886020828401011115614df257600080fd5b959894975092955050506020019190565b60008082840360e0811215614e1757600080fd5b8335925060c0601f1982011215614e2d57600080fd5b506020830190509250929050565b6001600160801b03811681146110c257600080fd5b60008060008060808587031215614e6657600080fd5b843593506020850135614e7881614c98565b92506040850135614e8881614e3b565b91506060850135614e9881614e3b565b939692955090935050565b600080600060608486031215614eb857600080fd5b8335614ec381614c98565b92506020840135614ed381614c98565b929592945050506040919091013590565b600060208284031215614ef657600080fd5b81356136e181614c98565b600060208284031215614f1357600080fd5b5035919050565b600080600060408486031215614f2f57600080fd5b83356001600160401b03811115614f4557600080fd5b8401601f81018613614f5657600080fd5b80356001600160401b03811115614f6c57600080fd5b8660208260051b8401011115614f8157600080fd5b602091820194509250840135614d1d81614d28565b60005b83811015614fb1578181015183820152602001614f99565b50506000910152565b60008151808452614fd2816020860160208601614f96565b601f01601f19169290920160200192915050565b602081526000825160a0602084015261500260c0840182614fba565b905060208401516040840152604084015160608401526060840151608084015260018060a01b0360808501511660a08401528091505092915050565b6000806040838503121561505157600080fd5b823561505c81614c98565b946020939093013593505050565b8151815260208083015161014083019161508e908401826001600160a01b03169052565b5060408301516150a960408401826001600160a01b03169052565b506060830151606083015260808301516150ce60808401826001600160a01b03169052565b5060a08301516150e960a08401826001600160a01b03169052565b5060c083015161510460c08401826001600160a01b03169052565b5060e083015161511f60e08401826001600160a01b03169052565b5061010083015161010083015261012083015161012083015292915050565b8060020b81146110c257600080fd5b6000806000806080858703121561516357600080fd5b843561516e8161513e565b9350602085013561517e8161513e565b92506040850135614e888161513e565b600080604083850312156151a157600080fd5b50508035926020909101359150565b6000602082840312156151c257600080fd5b81356001600160401b038111156151d857600080fd5b820161012081850312156136e157600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715615223576152236151eb565b60405290565b604051601f8201601f191681016001600160401b0381118282101715615251576152516151eb565b604052919050565b60006001600160401b03821115615272576152726151eb565b50601f01601f191660200190565b600082601f83011261529157600080fd5b81356152a461529f82615259565b615229565b8181528460208386010111156152b957600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156152e857600080fd5b81356001600160401b038111156152fe57600080fd5b613efb84828501615280565b60006020828403121561531c57600080fd5b81356136e18161513e565b600080600080600060a0868803121561533f57600080fd5b85356001600160401b0381111561535557600080fd5b61536188828901615280565b955050602086013593506040860135925060608601359150608086013561538781614c98565b809150509295509295909350565b60008082840360c08112156153a957600080fd5b8335925060a0601f1982011215614e2d57600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b8051611fed81614c98565b805162ffffff81168114611fed57600080fd5b8051611fed8161513e565b8051611fed81614e3b565b6000806000806000806000806000806000806101808d8f03121561543a57600080fd5b8c516bffffffffffffffffffffffff8116811461545657600080fd5b9b5061546460208e016153e3565b9a5061547260408e016153e3565b995061548060608e016153e3565b985061548e60808e016153ee565b975061549c60a08e01615401565b96506154aa60c08e01615401565b95506154b860e08e0161540c565b6101008e01516101208f0151919650945092506154d86101408e0161540c565b91506154e76101608e0161540c565b90509295989b509295989b509295989b565b60008060006060848603121561550e57600080fd5b835161551981614e3b565b602085015160409095015190969495509392505050565b60208082526005908201526427aba722a960d91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061557957607f821691505b60208210810361559957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600b908201526a1110551148141054d4d15160aa1b604082015260600190565b6020808252600c908201526b4d494c4c495345434f4e445360a01b604082015260600190565b6020808252600c908201526b21a7a62622a1aa2fa0a2222960a11b604082015260600190565b6000808335601e1984360301811261562757600080fd5b8301803591506001600160401b0382111561564157600080fd5b6020019150600581901b36038213156130c057600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040808252810183905260006060600585901b830181019083018683601e1936839003015b8882101561571757868503605f1901845282358181126156c657600080fd5b8a016020810190356001600160401b038111156156e257600080fd5b8036038213156156f157600080fd5b6156fc878284615659565b965050506020830192506020840193506001820191506156a7565b5050506001600160a01b0385166020850152509050613efb565b60006020828403121561574357600080fd5b81516001600160401b0381111561575957600080fd5b820160a0818503121561576b57600080fd5b615773615201565b81516001600160401b0381111561578957600080fd5b8201601f8101861361579a57600080fd5b80516157a861529f82615259565b8181528760208385010111156157bd57600080fd5b6157ce826020830160208601614f96565b835250506020828101519082015260408083015190820152606080830151908201526157fc608083016153e3565b6080820152949350505050565b6000808335601e1984360301811261582057600080fd5b8301803591506001600160401b0382111561583a57600080fd5b6020019150368190038213156130c057600080fd5b60006020828403121561586157600080fd5b81516136e181614c98565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b600080604083850312156158c257600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761129b5761129b6158d3565b634e487b7160e01b600052601260045260246000fd5b60008261592557615925615900565b500490565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b60006001820161597f5761597f6158d3565b5060010190565b60008251615998818460208701614f96565b9190910192915050565b6000602082840312156159b457600080fd5b81516136e18161513e565b60008160020b627fffff1981036159d8576159d86158d3565b60000392915050565b60008160020b8360020b806159f8576159f8615900565b627fffff19821460001982141615615a1257615a126158d3565b90059392505050565b60008260020b8260020b028060020b915080821461482a5761482a6158d3565b601f821115610fc557806000526020600020601f840160051c81016020851015615a625750805b601f840160051c820191505b818110156139815760008155600101615a6e565b81516001600160401b03811115615a9b57615a9b6151eb565b615aaf81615aa98454615565565b84615a3b565b6020601f821160018114615ae35760008315615acb5750848201515b600019600385901b1c1916600184901b178455613981565b600084815260208120601f198516915b82811015615b135787850151825560209485019460019092019101615af3565b5084821015615b315786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b86815260c060208201526000615b5960c0830188614fba565b604083019690965250606081019390935260808301919091526001600160a01b031660a09091015292915050565b8135815260a081016020830135615b9d81614e3b565b6001600160801b031660208301526040838101359083015260608084013590830152608092830135929091019190915290565b600060208284031215615be257600080fd5b5051919050565b8181038181111561129b5761129b6158d3565b600060208284031215615c0e57600080fd5b81516136e181614d28565b6000600160ff1b8201615c2e57615c2e6158d3565b5060000390565b600082615c4457615c44615900565b500690565b8082018082111561129b5761129b6158d3565b8a81526001600160a01b038a81166020830152604082018a90528881166060830152878116608083015286811660a083015260c0820186905260e08201859052831661010082015281516bffffffffffffffffffffffff166101208201526102a0810160208301516001600160a01b0381166101408401525060408301516001600160a01b0381166101608401525060608301516001600160a01b03811661018084015250608083015162ffffff81166101a08401525060a0830151615d286101c084018260020b9052565b5060c0830151615d3e6101e084018260020b9052565b5060e08301516001600160801b03908116610200840152610100840151610220840152610120840151610240840152610140840151811661026084015261016090930151909216610280909101529998505050505050505050565b81516001600160a01b0316815261016081016020830151615dc560208401826001600160a01b03169052565b506040830151615ddc604084018262ffffff169052565b506060830151615df1606084018260020b9052565b506080830151615e06608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e0830152610100830151610100830152610120830151615e4d6101208401826001600160a01b03169052565b5061014092830151919092015290565b60008060008060808587031215615e7357600080fd5b84516020860151909450615e8681614e3b565b6040860151606090960151949790965092505050565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b03828116828216039081111561129b5761129b6158d356fea264697066735822122044775f6b6326a07da78c34141bd2fc620b382624c141739cecdd864f9734246a64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptLockOwnership(uint256)": {
        "details": "accept lock ownership transfer"
      },
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "adminRefundERC20(address,address,uint256)": {
        "details": "Allows admin to remove any ERC20's mistakenly sent to the contract Since this contract is only for locking NFT liquidity, this allows removal of ERC20 tokens and cannot remove locked NFT liquidity."
      },
      "adminRefundEth(uint256,address)": {
        "details": "Allows admin to remove any eth mistakenly sent to the contract"
      },
      "batchUpdateWhitelist(address[],bool)": {
        "details": "Function to add multiple addresses to whitelist at once (only owner)"
      },
      "collect(uint256,address,uint128,uint128)": {
        "details": "Collect fees to _recipient if msg.sender is the owner of _lockId"
      },
      "decreaseLiquidity(uint256,(uint256,uint128,uint256,uint256,uint256))": {
        "details": "decrease liquidity if a lock has expired (useful before relocking)"
      },
      "getAmountsForLiquidity(int24,int24,int24,uint128)": {
        "details": "get a locks liquidity in amounts of token0 and token1 for a generic position (not from state)"
      },
      "getLock(uint256)": {
        "details": "returns a Lock struct for _lockId"
      },
      "getLocksLength()": {
        "details": "gets the number of unique locks in this contract, used to page through the lock array (includes expired and withdrawn locks)"
      },
      "getNumUserLocks(address)": {
        "details": "gets the number of locks for a user"
      },
      "getUserLockAtIndex(address,uint256)": {
        "details": "gets the lock at a specific index for a user"
      },
      "increaseLiquidity(uint256,(uint256,uint256,uint256,uint256,uint256,uint256))": {
        "details": "increases liquidity. Can be called by anyone. You should ideally call increaseLiquidity from the NftPositionManager directly for gas efficiency. This method is here just for convenience for some contracts which solely interact with the Lena lockers / lockIds"
      },
      "isWhitelisted(address)": {
        "details": "Function to check if an address is whitelisted"
      },
      "lock((address,uint256,address,address,address,address,uint256,string,bytes[]))": {
        "details": "collects fees and sends them back to collector",
        "params": {
          "params": "The locking params as seen in ILenaLock.sol This will also fail with rebasing tokens (liquidity nfts already stuck on univ3). Only whitelisted platforms can use this lock mechanism, such as projects with launchpads"
        }
      },
      "lockAndConvert((address,uint256,address,address,address,address,uint256,string,bytes[]))": {
        "details": "converts nft to full range and collects fees and sends them back to collector",
        "params": {
          "params": "The locking params as seen in ILenaLock.sol This function will fail if a liquidity position is out of range (100% token0, 0% token1) as it will not be able to create a full range position with counter liquidity. This will also fail with rebasing tokens (liquidity nfts already stuck on univ3)."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "relock(uint256,uint256)": {
        "details": "set the unlock date further in the future"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAdditionalCollector(uint256,address)": {
        "details": "allow a lock owner to add an additional address, usually a contract, to collect fees. Useful for bots"
      },
      "setCollectAddress(uint256,address)": {
        "details": "set the adress to which fees are automatically collected"
      },
      "setUCF(uint256,uint256)": {
        "details": "set ucf"
      },
      "tickSpacingToMaxTick(int24)": {
        "details": "gets the maximum tick for a tickSpacing source: https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/Tick.sol"
      },
      "transferLockOwnership(uint256,address)": {
        "details": "transfer ownership of a lock to _newOwner"
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "updateWhitelist(address,bool)": {
        "details": "Function to add or remove addresses from whitelist (only owner)"
      },
      "withdraw(uint256,address)": {
        "details": "withdraw a UniV3 liquidity NFT and send it to _receiver Only callable once unlockDate has expired"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 370,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4730,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "FEES",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(FeeStruct)4362_storage)"
      },
      {
        "astId": 4733,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "FEE_LOOKUP",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Bytes32Set)2469_storage"
      },
      {
        "astId": 4736,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "FEE_RESOLVER",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IFeeResolver)4709"
      },
      {
        "astId": 4738,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "AUTO_COLLECT_ACCOUNT",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4740,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "FEE_ADDR_LP",
        "offset": 0,
        "slot": "8",
        "type": "t_address_payable"
      },
      {
        "astId": 4742,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "FEE_ADDR_COLLECT",
        "offset": 0,
        "slot": "9",
        "type": "t_address_payable"
      },
      {
        "astId": 4748,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "NONCE",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4755,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "ETERNAL_LOCK",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4760,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "LOCKS",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Lock)4384_storage)"
      },
      {
        "astId": 4765,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "USER_LOCKS",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(UintSet)2747_storage)"
      },
      {
        "astId": 4769,
        "contract": "contracts/locker/LenaLock.sol:LenaLock",
        "label": "whitelisted",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFeeResolver)4709": {
        "encoding": "inplace",
        "label": "contract IFeeResolver",
        "numberOfBytes": "20"
      },
      "t_contract(INonfungiblePositionManager)3607": {
        "encoding": "inplace",
        "label": "contract INonfungiblePositionManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UintSet)2747_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2747_storage"
      },
      "t_mapping(t_bytes32,t_struct(FeeStruct)4362_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ILenaLock.FeeStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeStruct)4362_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Lock)4384_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILenaLock.Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)4384_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)2469_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2468,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2275_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FeeStruct)4362_storage": {
        "encoding": "inplace",
        "label": "struct ILenaLock.FeeStruct",
        "members": [
          {
            "astId": 4353,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4355,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "lpFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4357,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "collectFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4359,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "flatFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4361,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "flatFeeToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Lock)4384_storage": {
        "encoding": "inplace",
        "label": "struct ILenaLock.Lock",
        "members": [
          {
            "astId": 4364,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "lock_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4367,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "nftPositionManager",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(INonfungiblePositionManager)3607"
          },
          {
            "astId": 4369,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "pool",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4371,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "nft_id",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4373,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4375,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "pendingOwner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 4377,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "additionalCollector",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 4379,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "collectAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 4381,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "unlockDate",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4383,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "ucf",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Set)2275_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2270,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2274,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2747_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2746,
            "contract": "contracts/locker/LenaLock.sol:LenaLock",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2275_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}