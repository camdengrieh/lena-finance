{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/locker/LenaLockFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\ncontract LenaLockFactory {\n    event Deploy(address addr);\n\n    function deploy(bytes memory bytecode, uint256 salt) external returns (address addr) {\n        // Deploy contract using CREATE2\n        assembly {\n            addr := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n        emit Deploy(addr);\n    }\n\n    // Function to compute the address where the contract will be deployed...\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) public view returns (address) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                bytes1(0xff),\n                address(this),\n                salt,\n                bytecodeHash\n            )\n        );\n        return address(uint160(uint256(hash)));\n    }\n} "
    },
    "contracts/locker/univ2/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.0.0\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/locker/univ2/MigrateLP.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\n// This contract locks uniswap v2 liquidity tokens. Used to give investors piece of mind a token team has locked liquidity\r\n// and that the univ2 tokens cannot be removed from uniswap until the specified unlock date has been reached.\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport {TransferHelper} from \"./TransferHelper.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\ncontract MigrateLP {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    \r\n    address public sender;\r\n    address public lockOwner;\r\n    \r\n    address public uniswapV2Locker;\r\n    \r\n    struct TokenLock {\r\n      uint256 lockDate; // the date the token was locked\r\n      uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\r\n      uint256 initialAmount; // the initial lock amount\r\n      uint256 unlockDate; // the date the token can be withdrawn\r\n      uint256 lockID; // lockID nonce per uni pair\r\n      address owner;\r\n    }\r\n    \r\n    EnumerableSet.AddressSet private lockedTokens;\r\n    mapping(address => TokenLock[]) public tokenLocks; //map univ2 pair to all its locks\r\n    \r\n    constructor(address _uniswapV2Locker) public {\r\n      uniswapV2Locker = _uniswapV2Locker;\r\n    }\r\n    \r\n    function migrate(address _lpToken, uint256 _amount, uint256 _unlockDate, address payable _owner) external returns (bool) {\r\n      require(msg.sender == uniswapV2Locker, 'OWNER NOT LOCKER');\r\n      TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\r\n      sender = msg.sender;\r\n      lockOwner = _owner;\r\n      \r\n      TokenLock memory token_lock;\r\n      token_lock.lockDate = block.timestamp;\r\n      token_lock.amount = _amount;\r\n      token_lock.initialAmount = _amount;\r\n      token_lock.unlockDate = _unlockDate;\r\n      token_lock.lockID = tokenLocks[_lpToken].length;\r\n      token_lock.owner = _owner;\r\n\r\n      // record the lock for the univ2pair\r\n      tokenLocks[_lpToken].push(token_lock);\r\n      lockedTokens.add(_lpToken);\r\n    \r\n      return true;\r\n    }\r\n    \r\n    function getNumLocksForToken (address _lpToken) external view returns (uint256) {\r\n      return tokenLocks[_lpToken].length;\r\n    }\r\n}"
    },
    "contracts/locker/univ2/TransferHelper.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\n// helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n}"
    },
    "contracts/locker/univ2/UniswapV2Locker.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n// ALL RIGHTS RESERVED\r\n// Unicrypt by SDDTech reserves all rights on this code. You may NOT copy these contracts.\r\n\r\n// This contract locks liquidity tokens. Used to give investors peace of mind a token team has locked liquidity\r\n// and that the liquidity tokens cannot be removed from the AMM until the specified unlock date has been reached. This is one of many\r\n// important industry standards to ensure safety.\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport {TransferHelper} from \"./TransferHelper.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IERCBurn {\r\n    function burn(uint256 _amount) external;\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IUniFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address);\r\n}\r\n\r\ninterface IMigrator {\r\n    function migrate(address lpToken, uint256 amount, uint256 unlockDate, address owner, uint256 option) external returns (bool);\r\n}\r\n\r\ncontract UniswapV2Locker is Ownable2Step, ReentrancyGuard {\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n  using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n  IUniFactory public uniswapFactory;\r\n\r\n  struct UserInfo {\r\n    EnumerableSet.AddressSet lockedTokens; // records all unique tokens the user has locked\r\n    mapping(address => EnumerableSet.UintSet) locksForToken; // map erc20 address to lock id list for that user / token.\r\n  }\r\n\r\n  struct TokenLock {\r\n    address lpToken; // The LP token\r\n    uint256 lockDate; // the date the token was locked\r\n    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\r\n    uint256 initialAmount; // the initial lock amount\r\n    uint256 unlockDate; // the date the token can be withdrawn\r\n    uint256 lockID; // lockID nonce per uni pair\r\n    address owner; // who can withdraw the lock\r\n  }\r\n\r\n  mapping(address => UserInfo) private USERS; // Get lock user info\r\n\r\n  mapping(uint256 => TokenLock) public LOCKS; // ALL locks are registered here in chronological lock id order.\r\n  uint256 public NONCE = 0; // incremental lock nonce counter, this is the unique ID for the next lock\r\n\r\n  EnumerableSet.AddressSet private lockedTokens; // a list of all unique locked liquidity tokens\r\n  mapping(address => uint256[]) public TOKEN_LOCKS; // map univ2 pair to an array of all its lock ids\r\n  \r\n  struct FeeStruct {\r\n    uint256 ethFee; // Small eth fee to prevent spam on the platform\r\n    IERCBurn secondaryFeeToken; // LENA\r\n    uint256 secondaryTokenFee; // optional, LENA\r\n    uint256 secondaryTokenDiscount; // discount on liquidity fee for burning secondaryToken\r\n    uint256 liquidityFee; // fee on univ2 liquidity tokens\r\n    uint256 referralPercent; // fee for referrals\r\n    IERCBurn referralToken; // token the refferer must hold to qualify as a referrer\r\n    uint256 referralHold; // balance the referrer must hold to qualify as a referrer\r\n    uint256 referralDiscount; // discount on flatrate fees for using a valid referral address\r\n  }\r\n    \r\n  FeeStruct public gFees;\r\n  EnumerableSet.AddressSet private feeWhitelist;\r\n  \r\n  address payable devaddr;\r\n  \r\n  IMigrator public migrator; // migration contract\r\n\r\n  event onNewLock(uint256 lockID, address lpToken, address owner, uint256 amount, uint256 lockDate, uint256 unlockDate);\r\n  event onRelock(uint256 lockID, address lpToken, address owner, uint256 amountRemainingInLock, uint256 liquidityFee, uint256 unlockDate);\r\n  event onWithdraw(uint256 lockID, address lpToken, address owner, uint256 amountRemainingInLock, uint256 amountRemoved);\r\n  event onIncrementLock(uint256 lockID, address lpToken, address owner, address payer, uint256 amountRemainingInLock, uint256 amountAdded, uint256 liquidityFee);\r\n  event onSplitLock(uint256 lockID, address lpToken, address owner, uint256 amountRemainingInLock, uint256 amountRemoved);\r\n  event onTransferLockOwnership(uint256 lockID, address lpToken, address oldOwner, address newOwner);\r\n  event OnMigrate(uint256 lockID, address lpToken, address owner, uint256 amountRemainingInLock, uint256 amountMigrated, uint256 migrationOption);\r\n\r\n  constructor(IUniFactory _uniswapFactory, address payable _feeAddress) Ownable(msg.sender) {\r\n    devaddr = _feeAddress;\r\n    gFees.referralPercent = 250; // 25%\r\n    gFees.ethFee = 1e18;\r\n    gFees.secondaryTokenFee = 100e18;\r\n    gFees.secondaryTokenDiscount = 200; // 20%\r\n    gFees.liquidityFee = 10; // 1%\r\n    gFees.referralHold = 10e18;\r\n    gFees.referralDiscount = 100; // 10%\r\n    uniswapFactory = _uniswapFactory;\r\n  }\r\n  \r\n  function setDev(address payable _devaddr) public onlyOwner {\r\n    devaddr = _devaddr;\r\n  }\r\n  \r\n  /**\r\n   * @notice set the migrator contract which allows locked lp tokens to be migrated to future AMM versions\r\n   */\r\n  function setMigrator(IMigrator _migrator) public onlyOwner {\r\n    migrator = _migrator;\r\n  }\r\n  \r\n  function setSecondaryFeeToken(address _secondaryFeeToken) public onlyOwner {\r\n    gFees.secondaryFeeToken = IERCBurn(_secondaryFeeToken);\r\n  }\r\n  \r\n  /**\r\n   * @notice referrers need to hold the specified token and hold amount to be elegible for referral fees\r\n   */\r\n  function setReferralTokenAndHold(IERCBurn _referralToken, uint256 _hold) public onlyOwner {\r\n    gFees.referralToken = _referralToken;\r\n    gFees.referralHold = _hold;\r\n  }\r\n  \r\n  function setFees(uint256 _referralPercent, uint256 _referralDiscount, uint256 _ethFee, uint256 _secondaryTokenFee, uint256 _secondaryTokenDiscount, uint256 _liquidityFee) public onlyOwner {\r\n    gFees.referralPercent = _referralPercent;\r\n    gFees.referralDiscount = _referralDiscount;\r\n    gFees.ethFee = _ethFee;\r\n    gFees.secondaryTokenFee = _secondaryTokenFee;\r\n    gFees.secondaryTokenDiscount = _secondaryTokenDiscount;\r\n    gFees.liquidityFee = _liquidityFee;\r\n  }\r\n  \r\n  /**\r\n   * @notice whitelisted accounts dont pay flatrate fees on locking\r\n   */\r\n  function whitelistFeeAccount(address _user, bool _add) public onlyOwner {\r\n    if (_add) {\r\n      feeWhitelist.add(_user);\r\n    } else {\r\n      feeWhitelist.remove(_user);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a new lock\r\n   * @param _lpToken the univ2 token address\r\n   * @param _amount amount of LP tokens to lock\r\n   * @param _unlock_date the unix timestamp (in seconds) until unlock\r\n   * @param _referral the referrer address if any or address(0) for none\r\n   * @param _fee_in_eth fees can be paid in eth or in a secondary token such as LENA with a discount on univ2 tokens\r\n   * @param _withdrawer the user who can withdraw liquidity once the lock expires.\r\n   */\r\n  function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _referral, bool _fee_in_eth, address payable _withdrawer) external payable nonReentrant {\r\n    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\r\n    require(_amount > 0, 'INSUFFICIENT');\r\n\r\n    // TODO re-enable this check\r\n    // ensure this pair is a univ2 pair by querying the factory\r\n    IUniswapV2Pair lpair = IUniswapV2Pair(address(_lpToken));\r\n    address factoryPairAddress = uniswapFactory.getPair(lpair.token0(), lpair.token1());\r\n    require(factoryPairAddress == address(_lpToken), 'NOT UNIV2');\r\n\r\n    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\r\n    \r\n    if (_referral != address(0) && address(gFees.referralToken) != address(0)) {\r\n      require(gFees.referralToken.balanceOf(_referral) >= gFees.referralHold, 'INADEQUATE BALANCE');\r\n    }\r\n    \r\n    // flatrate fees\r\n    if (!feeWhitelist.contains(msg.sender)) {\r\n      if (_fee_in_eth) { // charge fee in eth\r\n        uint256 ethFee = gFees.ethFee;\r\n        if (_referral != address(0)) {\r\n          ethFee = ethFee * (1000 - gFees.referralDiscount) / 1000;\r\n        }\r\n        require(msg.value == ethFee, 'FEE NOT MET');\r\n        uint256 devFee = ethFee;\r\n        if (ethFee != 0 && _referral != address(0)) { // referral fee\r\n          uint256 referralFee = devFee * gFees.referralPercent / 1000;\r\n          _referral.transfer(referralFee);\r\n          devFee -= referralFee;\r\n        }\r\n        devaddr.transfer(devFee);\r\n      } else { // charge fee in token\r\n        uint256 burnFee = gFees.secondaryTokenFee;\r\n        if (_referral != address(0)) {\r\n          burnFee = burnFee * (1000 - gFees.referralDiscount) / 1000;\r\n        }\r\n        TransferHelper.safeTransferFrom(address(gFees.secondaryFeeToken), address(msg.sender), address(this), burnFee);\r\n        if (gFees.referralPercent != 0 && _referral != address(0)) { // referral fee\r\n          uint256 referralFee = burnFee * gFees.referralPercent / 1000;\r\n          TransferHelper.safeApprove(address(gFees.secondaryFeeToken), _referral, referralFee);\r\n          TransferHelper.safeTransfer(address(gFees.secondaryFeeToken), _referral, referralFee);\r\n          burnFee -= referralFee;\r\n        }\r\n        gFees.secondaryFeeToken.burn(burnFee);\r\n      }\r\n    } else if (msg.value > 0){\r\n      // refund eth if a whitelisted member sent it by mistake\r\n      payable(msg.sender).transfer(msg.value);\r\n    }\r\n    \r\n    // percent fee\r\n    uint256 liquidityFee = _amount * gFees.liquidityFee / 1000;\r\n    if (!_fee_in_eth && !feeWhitelist.contains(msg.sender)) { // fee discount for large lockers using secondary token\r\n      liquidityFee = liquidityFee * (1000 - gFees.secondaryTokenDiscount) / 1000;\r\n    }\r\n    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\r\n    uint256 amountLocked = _amount - liquidityFee;\r\n\r\n    TokenLock memory token_lock;\r\n    token_lock.lpToken = _lpToken;\r\n    token_lock.lockDate = block.timestamp;\r\n    token_lock.amount = amountLocked;\r\n    token_lock.initialAmount = amountLocked;\r\n    token_lock.unlockDate = _unlock_date;\r\n    token_lock.lockID = NONCE;\r\n    token_lock.owner = _withdrawer;\r\n\r\n    // record the lock for the univ2pair\r\n    LOCKS[NONCE] = token_lock;\r\n    lockedTokens.add(_lpToken);\r\n    TOKEN_LOCKS[_lpToken].push(NONCE);\r\n\r\n    // record the lock for the user\r\n    UserInfo storage user = USERS[_withdrawer];\r\n    user.lockedTokens.add(_lpToken);\r\n    EnumerableSet.UintSet storage user_locks = user.locksForToken[_lpToken];\r\n    user_locks.add(token_lock.lockID);\r\n\r\n    NONCE ++;\r\n    \r\n    emit onNewLock(token_lock.lockID, _lpToken, _withdrawer, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\r\n  }\r\n  \r\n  /**\r\n   * @notice extend a lock with a new unlock date\r\n   */\r\n  function relock (uint256 _lockID, uint256 _unlock_date) external nonReentrant {\r\n    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\r\n    TokenLock storage userLock = LOCKS[_lockID];\r\n    require(userLock.owner == msg.sender, 'NOT OWNER');\r\n    require(userLock.unlockDate < _unlock_date, 'UNLOCK BEFORE');\r\n    \r\n    uint256 liquidityFee = userLock.amount * gFees.liquidityFee / 1000;\r\n    uint256 amountLocked = userLock.amount - liquidityFee;\r\n    \r\n    userLock.amount = amountLocked;\r\n    userLock.unlockDate = _unlock_date;\r\n\r\n    // send univ2 fee to dev address\r\n    TransferHelper.safeTransfer(userLock.lpToken, devaddr, liquidityFee);\r\n    emit onRelock(userLock.lockID, userLock.lpToken, msg.sender, userLock.amount, liquidityFee, userLock.unlockDate);\r\n  }\r\n  \r\n  /**\r\n   * @notice withdraw a specified amount from a lock\r\n   */\r\n  function withdraw (uint256 _lockID, uint256 _amount) external nonReentrant {\r\n    require(_amount > 0, 'ZERO WITHDRAWL');\r\n    TokenLock storage userLock = LOCKS[_lockID];\r\n    require(userLock.owner == msg.sender, 'NOT OWNER');\r\n    require(userLock.unlockDate < block.timestamp, 'NOT YET');\r\n    userLock.amount -= _amount;\r\n\r\n    // clean user storage\r\n    if (userLock.amount == 0) {\r\n      EnumerableSet.UintSet storage userLocks = USERS[msg.sender].locksForToken[userLock.lpToken];\r\n      userLocks.remove(userLock.lockID);\r\n      if (userLocks.length() == 0) {\r\n        USERS[msg.sender].lockedTokens.remove(userLock.lpToken);\r\n      }\r\n    }\r\n    \r\n    TransferHelper.safeTransfer(userLock.lpToken, msg.sender, _amount);\r\n    emit onWithdraw(userLock.lockID, userLock.lpToken, msg.sender, userLock.amount, _amount);\r\n  }\r\n  \r\n  /**\r\n   * @notice PLEASE BE AWARE THIS FUNCTION CONTAINS NO OWNER CHECK. ANYONE CAN LOCK THEIR LPS INTO SOMEONE ELSES\r\n   * LOCK, BASICALLY GIVING THEM THEIR LP TOKENS.\r\n   * The use here is a CONTRACT which is not the owner of a lock can increment locks periodically (for example with fees) on behalf of the owner.\r\n   * This works well with taxing tokens.\r\n   *\r\n   * Increase the amount of tokens per a specific lock, this is preferable to creating a new lock,\r\n   * less fees, and faster loading on our live block explorer.\r\n   */\r\n  function incrementLock (uint256 _lockID, uint256 _amount) external nonReentrant {\r\n    require(_amount > 0, 'ZERO AMOUNT');\r\n    TokenLock storage userLock = LOCKS[_lockID];\r\n    // require(userLock.owner == msg.sender, 'NOT OWNER'); // disabled to allow contracts to lock on behalf of owners\r\n    \r\n    TransferHelper.safeTransferFrom(userLock.lpToken, address(msg.sender), address(this), _amount);\r\n    \r\n    // send univ2 fee to dev address\r\n    uint256 liquidityFee = _amount * gFees.liquidityFee / 1000;\r\n    TransferHelper.safeTransfer(userLock.lpToken, devaddr, liquidityFee);\r\n    uint256 amountLocked = _amount - liquidityFee;\r\n    \r\n    userLock.amount += amountLocked;\r\n    \r\n    emit onIncrementLock(userLock.lockID, userLock.lpToken, userLock.owner, msg.sender, userLock.amount, amountLocked, liquidityFee);\r\n  }\r\n  \r\n  /**\r\n   * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\r\n   * and withdraw a smaller portion\r\n   */\r\n  function splitLock (uint256 _lockID, uint256 _amount) external payable nonReentrant {\r\n    require(_amount > 0, 'ZERO AMOUNT');\r\n    TokenLock storage userLock = LOCKS[_lockID];\r\n    require(userLock.owner == msg.sender, 'NOT OWNER');\r\n    \r\n    require(msg.value == gFees.ethFee, 'FEE NOT MET');\r\n    devaddr.transfer(gFees.ethFee);\r\n    \r\n    userLock.amount -= _amount;\r\n    \r\n    TokenLock memory token_lock;\r\n    token_lock.lpToken = userLock.lpToken;\r\n    token_lock.lockDate = userLock.lockDate;\r\n    token_lock.amount = _amount;\r\n    token_lock.initialAmount = _amount;\r\n    token_lock.unlockDate = userLock.unlockDate;\r\n    token_lock.lockID = NONCE;\r\n    token_lock.owner = msg.sender;\r\n\r\n    // record the lock for the univ2pair\r\n    TOKEN_LOCKS[userLock.lpToken].push(NONCE);\r\n    LOCKS[NONCE] = token_lock;\r\n\r\n    // record the lock for the user\r\n    UserInfo storage user = USERS[msg.sender];\r\n    EnumerableSet.UintSet storage user_locks = user.locksForToken[userLock.lpToken];\r\n    user_locks.add(NONCE);\r\n    NONCE ++;\r\n    emit onSplitLock(userLock.lockID, userLock.lpToken, msg.sender, userLock.amount, _amount);\r\n    emit onNewLock(token_lock.lockID, token_lock.lpToken, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\r\n  }\r\n  \r\n  /**\r\n   * @notice transfer a lock to a new owner, e.g. presale project -> project owner\r\n   */\r\n  function transferLockOwnership (uint256 _lockID, address payable _newOwner) external {\r\n    require(msg.sender != _newOwner, 'OWNER');\r\n    TokenLock storage transferredLock = LOCKS[_lockID];\r\n    require(transferredLock.owner == msg.sender, 'NOT OWNER');\r\n    \r\n    // record the lock for the new Owner\r\n    UserInfo storage user = USERS[_newOwner];\r\n    user.lockedTokens.add(transferredLock.lpToken);\r\n    EnumerableSet.UintSet storage user_locks = user.locksForToken[transferredLock.lpToken];\r\n    user_locks.add(transferredLock.lockID);\r\n\r\n    // remove the lock from the old owner\r\n    EnumerableSet.UintSet storage userLocks = USERS[msg.sender].locksForToken[transferredLock.lpToken];\r\n    userLocks.remove(transferredLock.lockID);\r\n    if (userLocks.length() == 0) {\r\n      USERS[msg.sender].lockedTokens.remove(transferredLock.lpToken);\r\n    }\r\n    \r\n    transferredLock.owner = _newOwner;\r\n    emit onTransferLockOwnership(_lockID, transferredLock.lpToken, msg.sender, _newOwner);\r\n  }\r\n  \r\n  /**\r\n   * @notice migrates liquidity to the next release of an AMM\r\n   * @param _migration_option to be used as an AMM selector\r\n   */\r\n  function migrate (uint256 _lockID, uint256 _amount, uint256 _migration_option) external nonReentrant {\r\n    require(address(migrator) != address(0), \"NOT SET\");\r\n    require(_amount > 0, 'ZERO MIGRATION');\r\n    \r\n    TokenLock storage userLock = LOCKS[_lockID];\r\n    require(userLock.owner == msg.sender, 'NOT OWNER');\r\n    userLock.amount -= _amount;\r\n\r\n    // clean user storage\r\n    if (userLock.amount == 0) {\r\n      EnumerableSet.UintSet storage userLocks = USERS[msg.sender].locksForToken[userLock.lpToken];\r\n      userLocks.remove(userLock.lockID);\r\n      if (userLocks.length() == 0) {\r\n        USERS[msg.sender].lockedTokens.remove(userLock.lpToken);\r\n      }\r\n    }\r\n    \r\n    TransferHelper.safeApprove(userLock.lpToken, address(migrator), _amount);\r\n    migrator.migrate(userLock.lpToken, _amount, userLock.unlockDate, msg.sender, _migration_option);\r\n    emit OnMigrate(_lockID, userLock.lpToken, msg.sender, userLock.amount, _amount, _migration_option);\r\n  }\r\n  \r\n  function getNumLocksForToken (address _lpToken) external view returns (uint256) {\r\n    return TOKEN_LOCKS[_lpToken].length;\r\n  }\r\n  \r\n  function getNumLockedTokens () external view returns (uint256) {\r\n    return lockedTokens.length();\r\n  }\r\n  \r\n  function getLockedTokenAtIndex (uint256 _index) external view returns (address) {\r\n    return lockedTokens.at(_index);\r\n  }\r\n  \r\n  // user functions\r\n  function getUserNumLockedTokens (address _user) external view returns (uint256) {\r\n    UserInfo storage user = USERS[_user];\r\n    return user.lockedTokens.length();\r\n  }\r\n  \r\n  function getUserLockedTokenAtIndex (address _user, uint256 _index) external view returns (address) {\r\n    UserInfo storage user = USERS[_user];\r\n    return user.lockedTokens.at(_index);\r\n  }\r\n  \r\n  function getUserNumLocksForToken (address _user, address _lpToken) external view returns (uint256) {\r\n    UserInfo storage user = USERS[_user];\r\n    return user.locksForToken[_lpToken].length();\r\n  }\r\n  \r\n  function getUserLockForTokenAtIndex (address _user, address _lpToken, uint256 _index) external view \r\n  returns (TokenLock memory) {\r\n    uint256 lockID = USERS[_user].locksForToken[_lpToken].at(_index);\r\n    TokenLock storage tokenLock = LOCKS[lockID];\r\n    return tokenLock;\r\n  }\r\n  \r\n  // whitelist\r\n  function getWhitelistedUsersLength () external view returns (uint256) {\r\n    return feeWhitelist.length();\r\n  }\r\n  \r\n  function getWhitelistedUserAtIndex (uint256 _index) external view returns (address) {\r\n    return feeWhitelist.at(_index);\r\n  }\r\n  \r\n  function getUserWhitelistStatus (address _user) external view returns (bool) {\r\n    return feeWhitelist.contains(_user);\r\n  }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}